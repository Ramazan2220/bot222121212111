# üõ°Ô∏è HIGH AVAILABILITY DATABASE MANAGER
import os
import random
import logging
import time
from contextlib import contextmanager
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import QueuePool
from sqlalchemy.exc import OperationalError, DisconnectionError
import psycopg2

logger = logging.getLogger(__name__)

class HADatabaseManager:
    """High Availability Database Manager —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º failover"""
    
    def __init__(self):
        # URLs –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.master_url = os.getenv('DATABASE_MASTER_URL')
        self.slave_urls = [
            url for url in [
                os.getenv('DATABASE_SLAVE1_URL'),
                os.getenv('DATABASE_SLAVE2_URL'),
                os.getenv('DATABASE_SLAVE3_URL'),
            ] if url
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è engines
        self._init_engines()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.master_healthy = True
        self.slave_health = {url: True for url in self.slave_urls}
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        self.last_health_check = 0
        self.health_check_interval = 30  # —Å–µ–∫—É–Ω–¥
    
    def _init_engines(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î"""
        
        # Master engine (–¥–ª—è –∑–∞–ø–∏—Å–∏)
        if self.master_url:
            self.master_engine = create_engine(
                self.master_url,
                poolclass=QueuePool,
                pool_size=50,
                max_overflow=100,
                pool_timeout=60,
                pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                pool_recycle=3600,   # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
                echo=False
            )
        else:
            self.master_engine = None
            logger.error("‚ùå Master database URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        
        # Slave engines (–¥–ª—è —á—Ç–µ–Ω–∏—è)
        self.slave_engines = {}
        for i, url in enumerate(self.slave_urls):
            try:
                engine = create_engine(
                    url,
                    poolclass=QueuePool,
                    pool_size=20,
                    max_overflow=40,
                    pool_timeout=30,
                    pool_pre_ping=True,
                    pool_recycle=3600,
                    echo=False
                )
                self.slave_engines[url] = engine
                logger.info(f"‚úÖ Slave {i+1} –ø–æ–¥–∫–ª—é—á–µ–Ω: {url[:50]}...")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Slave {i+1}: {e}")
    
    def _check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ë–î"""
        current_time = time.time()
        if current_time - self.last_health_check < self.health_check_interval:
            return
        
        self.last_health_check = current_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Master
        if self.master_engine:
            try:
                with self.master_engine.connect() as conn:
                    conn.execute(text("SELECT 1"))
                    if not self.master_healthy:
                        logger.info("‚úÖ Master DB –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    self.master_healthy = True
            except Exception as e:
                if self.master_healthy:
                    logger.error(f"‚ùå Master DB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.master_healthy = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Slaves
        for url, engine in self.slave_engines.items():
            try:
                with engine.connect() as conn:
                    conn.execute(text("SELECT 1"))
                    if not self.slave_health[url]:
                        logger.info(f"‚úÖ Slave DB –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url[:50]}...")
                    self.slave_health[url] = True
            except Exception as e:
                if self.slave_health[url]:
                    logger.error(f"‚ùå Slave DB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.slave_health[url] = False
    
    def get_healthy_slaves(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–¥–æ—Ä–æ–≤—ã—Ö Slave engines"""
        self._check_health()
        return [
            engine for url, engine in self.slave_engines.items()
            if self.slave_health[url]
        ]
    
    @contextmanager
    def get_write_session(self):
        """–°–µ—Å—Å–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ (–≤—Å–µ–≥–¥–∞ Master —Å fallback)"""
        self._check_health()
        
        # –ü—Ä–æ–±—É–µ–º Master
        if self.master_healthy and self.master_engine:
            try:
                Session = sessionmaker(bind=self.master_engine)
                session = Session()
                yield session
                return
            except (OperationalError, DisconnectionError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Master: {e}")
                self.master_healthy = False
        
        # –ï—Å–ª–∏ Master –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–º–æ—Ç–∏—Ä–æ–≤–∞—Ç—å Slave
        healthy_slaves = self.get_healthy_slaves()
        if healthy_slaves:
            logger.warning("‚ö†Ô∏è Master –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ Slave...")
            try:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∑–¥–æ—Ä–æ–≤—ã–π Slave
                slave_engine = healthy_slaves[0]
                Session = sessionmaker(bind=slave_engine)
                session = Session()
                yield session
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Slave: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        raise Exception("‚ùå –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏!")
    
    @contextmanager 
    def get_read_session(self):
        """–°–µ—Å—Å–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è (Slaves —Å fallback –Ω–∞ Master)"""
        self._check_health()
        
        # –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å —Å–æ Slaves
        healthy_slaves = self.get_healthy_slaves()
        if healthy_slaves:
            try:
                # Round-robin –ø–æ –∑–¥–æ—Ä–æ–≤—ã–º Slaves
                slave_engine = random.choice(healthy_slaves)
                Session = sessionmaker(bind=slave_engine)
                session = Session()
                yield session
                return
            except (OperationalError, DisconnectionError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ Slave: {e}")
        
        # Fallback –Ω–∞ Master
        if self.master_healthy and self.master_engine:
            try:
                logger.info("üìñ –ß–∏—Ç–∞–µ–º —Å Master (Slaves –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
                Session = sessionmaker(bind=self.master_engine)
                session = Session()
                yield session
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å Master: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        raise Exception("‚ùå –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è!")
    
    def get_replication_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏"""
        if not self.master_healthy or not self.master_engine:
            return {"error": "Master –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        try:
            with self.master_engine.connect() as conn:
                result = conn.execute(text("""
                    SELECT 
                        client_addr,
                        application_name,
                        state,
                        pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn) as send_lag_bytes,
                        pg_wal_lsn_diff(sent_lsn, flush_lsn) as flush_lag_bytes,
                        pg_wal_lsn_diff(flush_lsn, replay_lsn) as replay_lag_bytes
                    FROM pg_stat_replication
                """))
                
                replicas = []
                for row in result:
                    replicas.append({
                        "client_addr": row[0],
                        "application_name": row[1],
                        "state": row[2],
                        "send_lag_mb": (row[3] or 0) / 1024 / 1024,
                        "flush_lag_mb": (row[4] or 0) / 1024 / 1024,
                        "replay_lag_mb": (row[5] or 0) / 1024 / 1024
                    })
                
                return {
                    "master_healthy": self.master_healthy,
                    "slaves_count": len(self.slave_engines),
                    "healthy_slaves": len(self.get_healthy_slaves()),
                    "replicas": replicas
                }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    def force_failover(self, target_slave_url=None):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Slave"""
        logger.warning("üîÑ –ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π failover...")
        
        healthy_slaves = self.get_healthy_slaves()
        if not healthy_slaves:
            raise Exception("‚ùå –ù–µ—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö Slaves –¥–ª—è failover!")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª–µ–≤–æ–π Slave
        if target_slave_url and target_slave_url in self.slave_engines:
            target_engine = self.slave_engines[target_slave_url]
        else:
            target_engine = healthy_slaves[0]
            target_slave_url = next(
                url for url, engine in self.slave_engines.items() 
                if engine == target_engine
            )
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–º–æ—Ç–∏—Ä–æ–≤–∞—Ç—å Slave
            # (–í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ patroni/repmgr)
            logger.info(f"üîÑ –ü—Ä–æ–º–æ—Ç–∏—Ä—É–µ–º Slave: {target_slave_url[:50]}...")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç Slave –Ω–æ–≤—ã–º Master
            self.master_engine = target_engine
            self.master_healthy = True
            
            # –£–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ Slaves
            del self.slave_engines[target_slave_url]
            del self.slave_health[target_slave_url]
            
            logger.info("‚úÖ Failover –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ failover: {e}")
            return False
    
    def get_connection_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        stats = {
            "master": {"pool_size": 0, "checked_out": 0, "checked_in": 0},
            "slaves": []
        }
        
        try:
            if self.master_engine:
                pool = self.master_engine.pool
                stats["master"] = {
                    "pool_size": pool.size(),
                    "checked_out": pool.checkedout(),
                    "checked_in": pool.checkedin(),
                    "healthy": self.master_healthy
                }
            
            for i, (url, engine) in enumerate(self.slave_engines.items()):
                pool = engine.pool
                stats["slaves"].append({
                    "slave_id": i + 1,
                    "url": url[:50] + "...",
                    "pool_size": pool.size(),
                    "checked_out": pool.checkedout(),
                    "checked_in": pool.checkedin(),
                    "healthy": self.slave_health[url]
                })
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            stats["error"] = str(e)
        
        return stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ha_db_manager = HADatabaseManager()

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
def get_session():
    """Backward compatibility - —á–∏—Ç–∞–µ–º —Å–æ Slaves"""
    return ha_db_manager.get_read_session()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
    from database.models import Base
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ Master
    if ha_db_manager.master_engine:
        Base.metadata.create_all(ha_db_manager.master_engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ Master DB")
    else:
        logger.error("‚ùå Master DB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü!") 