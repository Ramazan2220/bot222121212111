# üõ°Ô∏è HIGH AVAILABILITY SAFE USER WRAPPERS
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π High Availability –ë–î
"""

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy import and_
from sqlalchemy.orm import Session
from database.models import InstagramAccount, PublishTask, WarmupTask, TelegramUser
from database.ha_db_manager import ha_db_manager

logger = logging.getLogger(__name__)

# üìñ READ OPERATIONS (–∏—Å–ø–æ–ª—å–∑—É—é—Ç Slave DB)

def get_user_instagram_accounts(user_id: int, only_active: bool = True) -> List[InstagramAccount]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (READ –æ–ø–µ—Ä–∞—Ü–∏—è)
    –ß–∏—Ç–∞–µ—Ç —Å–æ Slave DB –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ Master
    """
    try:
        with ha_db_manager.get_read_session() as session:
            query = session.query(InstagramAccount).filter(
                InstagramAccount.user_id == user_id
            )
            
            if only_active:
                query = query.filter(InstagramAccount.is_active == True)
            
            accounts = query.all()
            logger.info(f"üìñ –ü–æ–ª—É—á–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return accounts
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

def get_user_instagram_account(user_id: int, account_id: int) -> Optional[InstagramAccount]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (READ –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_read_session() as session:
            account = session.query(InstagramAccount).filter(
                and_(
                    InstagramAccount.id == account_id,
                    InstagramAccount.user_id == user_id
                )
            ).first()
            
            if account:
                logger.info(f"üìñ –ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç {account.username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
            return account
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def get_user_publish_tasks(user_id: int, limit: int = 100, status: str = None) -> List[PublishTask]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (READ –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_read_session() as session:
            query = session.query(PublishTask).filter(
                PublishTask.user_id == user_id
            )
            
            if status:
                query = query.filter(PublishTask.status == status)
            
            tasks = query.order_by(PublishTask.created_at.desc()).limit(limit).all()
            logger.info(f"üìñ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return tasks
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

def get_user_warmup_tasks(user_id: int, limit: int = 100) -> List[WarmupTask]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (READ –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_read_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            account_ids = session.query(InstagramAccount.id).filter(
                InstagramAccount.user_id == user_id
            ).subquery()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è —ç—Ç–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            tasks = session.query(WarmupTask).filter(
                WarmupTask.account_id.in_(account_ids)
            ).order_by(WarmupTask.created_at.desc()).limit(limit).all()
            
            logger.info(f"üìñ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return tasks
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

def get_user_statistics(user_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (READ –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_read_session() as session:
            # –ü–æ–¥—Å—á–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            total_accounts = session.query(InstagramAccount).filter(
                InstagramAccount.user_id == user_id
            ).count()
            
            active_accounts = session.query(InstagramAccount).filter(
                and_(
                    InstagramAccount.user_id == user_id,
                    InstagramAccount.is_active == True
                )
            ).count()
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á
            pending_tasks = session.query(PublishTask).filter(
                and_(
                    PublishTask.user_id == user_id,
                    PublishTask.status == 'PENDING'
                )
            ).count()
            
            completed_tasks = session.query(PublishTask).filter(
                and_(
                    PublishTask.user_id == user_id,
                    PublishTask.status == 'COMPLETED'
                )
            ).count()
            
            stats = {
                "user_id": user_id,
                "accounts": {
                    "total": total_accounts,
                    "active": active_accounts,
                    "inactive": total_accounts - active_accounts
                },
                "tasks": {
                    "pending": pending_tasks,
                    "completed": completed_tasks
                }
            }
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {stats}")
            return stats
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {"error": str(e)}

# ‚úçÔ∏è WRITE OPERATIONS (–∏—Å–ø–æ–ª—å–∑—É—é—Ç Master DB)

def create_user_instagram_account(user_id: int, **kwargs) -> Optional[InstagramAccount]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (WRITE –æ–ø–µ—Ä–∞—Ü–∏—è)
    –ü–∏—à–µ—Ç –≤ Master DB
    """
    try:
        with ha_db_manager.get_write_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = session.query(InstagramAccount).filter(
                and_(
                    InstagramAccount.user_id == user_id,
                    InstagramAccount.username == kwargs.get('username')
                )
            ).first()
            
            if existing:
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {kwargs.get('username')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return existing
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = InstagramAccount(user_id=user_id, **kwargs)
            session.add(account)
            session.commit()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç {account.username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return account
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def update_user_instagram_account(user_id: int, account_id: int, **kwargs) -> bool:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (WRITE –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_write_session() as session:
            account = session.query(InstagramAccount).filter(
                and_(
                    InstagramAccount.id == account_id,
                    InstagramAccount.user_id == user_id
                )
            ).first()
            
            if not account:
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            for key, value in kwargs.items():
                if hasattr(account, key):
                    setattr(account, key, value)
            
            session.commit()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç {account.username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def delete_user_instagram_account(user_id: int, account_id: int) -> bool:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (WRITE –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_write_session() as session:
            account = session.query(InstagramAccount).filter(
                and_(
                    InstagramAccount.id == account_id,
                    InstagramAccount.user_id == user_id
                )
            ).first()
            
            if not account:
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            username = account.username
            session.delete(account)
            session.commit()
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def create_user_publish_task(user_id: int, account_id: int, **kwargs) -> Optional[PublishTask]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (WRITE –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_write_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            account = session.query(InstagramAccount).filter(
                and_(
                    InstagramAccount.id == account_id,
                    InstagramAccount.user_id == user_id
                )
            ).first()
            
            if not account:
                logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = PublishTask(
                user_id=user_id,
                account_id=account_id,
                **kwargs
            )
            session.add(task)
            session.commit()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∞–∫–∫–∞—É–Ω—Ç {account.username}")
            return task
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def update_publish_task_status(user_id: int, task_id: int, status: str, **kwargs) -> bool:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (WRITE –æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    try:
        with ha_db_manager.get_write_session() as session:
            task = session.query(PublishTask).filter(
                and_(
                    PublishTask.id == task_id,
                    PublishTask.user_id == user_id
                )
            ).first()
            
            if not task:
                logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            task.status = status
            for key, value in kwargs.items():
                if hasattr(task, key):
                    setattr(task, key, value)
            
            session.commit()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# üîç VALIDATION & SECURITY

def validate_user_access_to_account(user_id: int, account_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
    """
    try:
        with ha_db_manager.get_read_session() as session:
            account = session.query(InstagramAccount).filter(
                and_(
                    InstagramAccount.id == account_id,
                    InstagramAccount.user_id == user_id
                )
            ).first()
            
            return account is not None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account_id}: {e}")
        return False

def validate_user_access_to_task(user_id: int, task_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–¥–∞—á–µ
    """
    try:
        with ha_db_manager.get_read_session() as session:
            task = session.query(PublishTask).filter(
                and_(
                    PublishTask.id == task_id,
                    PublishTask.user_id == user_id
                )
            ).first()
            
            return task is not None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫ –∑–∞–¥–∞—á–µ {task_id}: {e}")
        return False

# üìä MONITORING & HEALTH

def get_ha_database_status() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ High Availability –ë–î
    """
    try:
        replication_status = ha_db_manager.get_replication_status()
        connection_stats = ha_db_manager.get_connection_stats()
        
        return {
            "replication": replication_status,
            "connections": connection_stats,
            "healthy_slaves": len(ha_db_manager.get_healthy_slaves()),
            "total_slaves": len(ha_db_manager.slave_engines)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ HA –ë–î: {e}")
        return {"error": str(e)}

def test_ha_database_connectivity() -> Dict[str, Any]:
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ HA –ë–î
    """
    results = {
        "master_write": False,
        "master_read": False,
        "slaves_read": [],
        "errors": []
    }
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ Master
    try:
        with ha_db_manager.get_write_session() as session:
            session.execute("SELECT 1")
            results["master_write"] = True
    except Exception as e:
        results["errors"].append(f"Master write error: {e}")
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Å Master
    try:
        with ha_db_manager.get_read_session() as session:
            session.execute("SELECT 1")
            results["master_read"] = True
    except Exception as e:
        results["errors"].append(f"Read error: {e}")
    
    # –¢–µ—Å—Ç –∫–∞–∂–¥–æ–≥–æ Slave
    for i, (url, engine) in enumerate(ha_db_manager.slave_engines.items()):
        try:
            with engine.connect() as conn:
                conn.execute("SELECT 1")
                results["slaves_read"].append(f"Slave {i+1}: OK")
        except Exception as e:
            results["slaves_read"].append(f"Slave {i+1}: ERROR - {e}")
    
    return results 