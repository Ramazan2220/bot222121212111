#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø –†–ï–°–£–†–°–û–í
–†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç CPU, RAM –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è Instagram –±–æ—Ç–∞
"""

import sys
import psutil
import threading
import time
from dataclasses import dataclass
from typing import Dict, List, Optional
import json

@dataclass
class ResourceConsumption:
    """–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    cpu_seconds: float  # –°–µ–∫—É–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ CPU
    ram_mb: float      # –ú–ë –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    connections: int   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
    disk_io_mb: float  # –ú–ë –¥–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

class InstagramBotResourceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ Instagram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.connection_pool_size = 100  # Connection pool
        self.connection_overhead_mb = 2  # –ú–ë –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        
    def analyze_single_account_operations(self) -> Dict[str, ResourceConsumption]:
        """–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        
        operations = {}
        
        # 1. –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ü–û–°–¢–ê
        operations['post_publication'] = ResourceConsumption(
            cpu_seconds=self._calculate_post_cpu(),
            ram_mb=self._calculate_post_ram(),
            connections=2,  # DB + Redis
            disk_io_mb=self._calculate_post_disk_io()
        )
        
        # 2. –ü–†–û–ì–†–ï–í –ê–ö–ö–ê–£–ù–¢–ê (–ª–∞–π–∫/–ø–æ–¥–ø–∏—Å–∫–∞)
        operations['warmup_action'] = ResourceConsumption(
            cpu_seconds=self._calculate_warmup_cpu(),
            ram_mb=self._calculate_warmup_ram(),
            connections=1,  # –¢–æ–ª—å–∫–æ DB
            disk_io_mb=self._calculate_warmup_disk_io()
        )
        
        # 3. IMAP –ü–†–û–í–ï–†–ö–ê
        operations['imap_check'] = ResourceConsumption(
            cpu_seconds=self._calculate_imap_cpu(),
            ram_mb=self._calculate_imap_ram(),
            connections=1,  # DB –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            disk_io_mb=self._calculate_imap_disk_io()
        )
        
        # 4. HEALTH CHECK
        operations['health_check'] = ResourceConsumption(
            cpu_seconds=self._calculate_health_cpu(),
            ram_mb=self._calculate_health_ram(),
            connections=1,  # DB read/write
            disk_io_mb=self._calculate_health_disk_io()
        )
        
        # 5. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
        operations['profile_update'] = ResourceConsumption(
            cpu_seconds=self._calculate_profile_cpu(),
            ram_mb=self._calculate_profile_ram(),
            connections=1,  # DB update
            disk_io_mb=self._calculate_profile_disk_io()
        )
        
        return operations
        
    def _calculate_post_cpu(self) -> float:
        """CPU –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:
        return (
            0.1 +   # –°–æ–∑–¥–∞–Ω–∏–µ task –≤ –ë–î
            0.2 +   # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ —Å –¥–∏—Å–∫–∞
            1.5 +   # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ (PIL/ffmpeg)
            0.5 +   # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Instagram API –∑–∞–ø—Ä–æ—Å–∞
            0.8 +   # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Instagram (CPU idle, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è—Ç)
            0.1 +   # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
            0.2     # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ cleanup
        )  # = 3.4 —Å–µ–∫—É–Ω–¥—ã –ê–ö–¢–ò–í–ù–û–ì–û CPU
        
    def _calculate_post_ram(self) -> float:
        """RAM –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
        return (
            15.0 +  # Instagram session object
            25.0 +  # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ (—Å–∂–∞—Ç—ã–π)
            5.0 +   # HTTP –∑–∞–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç
            3.0 +   # SQLAlchemy objects
            2.0     # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        )  # = 50 –ú–ë –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        
    def _calculate_post_disk_io(self) -> float:
        """–î–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        return (
            5.0 +   # –ß—Ç–µ–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞
            0.1 +   # –ó–∞–ø–∏—Å—å –≤ –ë–î (task)
            0.1 +   # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î (status)
            0.5     # –õ–æ–≥–∏
        )  # = 5.7 –ú–ë –¥–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        
    def _calculate_warmup_cpu(self) -> float:
        """CPU –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        return (
            0.05 +  # –ü–æ–ª—É—á–µ–Ω–∏–µ task –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            0.3 +   # Instagram API –∑–∞–ø—Ä–æ—Å (–ª–∞–π–∫/–ø–æ–¥–ø–∏—Å–∫–∞)
            0.5 +   # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è—Ç)
            0.05 +  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –ë–î
            0.1     # Anti-ban –∑–∞–¥–µ—Ä–∂–∫–∏
        )  # = 1.0 —Å–µ–∫—É–Ω–¥–∞ CPU
        
    def _calculate_warmup_ram(self) -> float:
        """RAM –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        return (
            15.0 +  # Instagram session
            2.0 +   # API request data
            1.0     # SQLAlchemy objects
        )  # = 18 –ú–ë
        
    def _calculate_warmup_disk_io(self) -> float:
        """–î–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        return (
            0.05 +  # UPDATE –≤ –ë–î
            0.1     # –õ–æ–≥–∏
        )  # = 0.15 –ú–ë
        
    def _calculate_imap_cpu(self) -> float:
        """CPU –¥–ª—è IMAP –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        return (
            0.5 +   # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
            0.8 +   # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–∏—Å–µ–º
            0.2 +   # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤/–¥–∞–Ω–Ω—ã—Ö
            0.1     # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
        )  # = 1.6 —Å–µ–∫—É–Ω–¥—ã
        
    def _calculate_imap_ram(self) -> float:
        """RAM –¥–ª—è IMAP"""
        return (
            8.0 +   # IMAP connection
            5.0 +   # Email messages –≤ –ø–∞–º—è—Ç–∏
            2.0     # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        )  # = 15 –ú–ë
        
    def _calculate_imap_disk_io(self) -> float:
        """–î–∏—Å–∫ –¥–ª—è IMAP"""
        return (
            0.05 +  # UPDATE –ë–î
            0.1     # –õ–æ–≥–∏
        )  # = 0.15 –ú–ë
        
    def _calculate_health_cpu(self) -> float:
        """CPU –¥–ª—è health check"""
        return (
            0.1 +   # SELECT –∏–∑ –ë–î
            0.4 +   # Instagram API —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å
            0.1 +   # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
            0.05    # UPDATE –ë–î
        )  # = 0.65 —Å–µ–∫—É–Ω–¥—ã
        
    def _calculate_health_ram(self) -> float:
        """RAM –¥–ª—è health check"""
        return (
            15.0 +  # Instagram session
            3.0 +   # Account data
            1.0     # API response
        )  # = 19 –ú–ë
        
    def _calculate_health_disk_io(self) -> float:
        """–î–∏—Å–∫ –¥–ª—è health check"""
        return (
            0.02 +  # SELECT –ë–î
            0.05 +  # UPDATE –ë–î
            0.05    # –õ–æ–≥–∏
        )  # = 0.12 –ú–ë
        
    def _calculate_profile_cpu(self) -> float:
        """CPU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        return (
            0.2 +   # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            1.0 +   # Instagram API –∑–∞–ø—Ä–æ—Å—ã (–±–∏–æ, –∞–≤–∞—Ç–∞—Ä, etc)
            0.5 +   # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
            0.1     # UPDATE –ë–î
        )  # = 1.8 —Å–µ–∫—É–Ω–¥—ã
        
    def _calculate_profile_ram(self) -> float:
        """RAM –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        return (
            15.0 +  # Instagram session
            10.0 +  # Avatar image –≤ –ø–∞–º—è—Ç–∏
            3.0     # Profile data
        )  # = 28 –ú–ë
        
    def _calculate_profile_disk_io(self) -> float:
        """–î–∏—Å–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        return (
            2.0 +   # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
            0.1 +   # UPDATE –ë–î
            0.1     # –õ–æ–≥–∏
        )  # = 2.2 –ú–ë

    def calculate_daily_load_per_user(self, accounts_per_user: int = 500) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        operations = self.analyze_single_account_operations()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        daily_operations = {
            'post_publication': accounts_per_user * 5,      # 5 –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å
            'warmup_action': accounts_per_user * 9 / 7,     # 9 –≤ –Ω–µ–¥–µ–ª—é = 1.3/–¥–µ–Ω—å
            'imap_check': accounts_per_user * 1,            # 1 —Ä–∞–∑/–¥–µ–Ω—å
            'health_check': accounts_per_user * 6,          # 6 —Ä–∞–∑/–¥–µ–Ω—å
            'profile_update': accounts_per_user * 2 / 30    # 2 —Ä–∞–∑–∞/–º–µ—Å—è—Ü
        }
        
        # –°—É–º–º–∞—Ä–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:
        total_load = {
            'cpu_seconds_per_day': 0,
            'peak_ram_mb': 0,
            'daily_disk_io_gb': 0,
            'concurrent_connections': 0
        }
        
        for op_name, daily_count in daily_operations.items():
            op_resource = operations[op_name]
            
            total_load['cpu_seconds_per_day'] += daily_count * op_resource.cpu_seconds
            total_load['peak_ram_mb'] += daily_count * op_resource.ram_mb * 0.1  # 10% –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö
            total_load['daily_disk_io_gb'] += daily_count * op_resource.disk_io_mb / 1024
            total_load['concurrent_connections'] += op_resource.connections * 2  # –ü–∏–∫–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä
            
        return total_load

    def calculate_system_load_100_users(self) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –¥–ª—è 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        single_user_load = self.calculate_daily_load_per_user()
        
        # Connection pooling —ç—Ñ—Ñ–µ–∫—Ç - –Ω–µ –ª–∏–Ω–µ–π–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        connection_efficiency = 0.7  # 70% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—É–ª–∞
        
        system_load = {
            'total_cpu_seconds_per_day': single_user_load['cpu_seconds_per_day'] * 100,
            'peak_cpu_utilization': self._calculate_peak_cpu_load(single_user_load),
            'total_ram_gb': (single_user_load['peak_ram_mb'] * 100) / 1024,
            'total_disk_io_gb_per_day': single_user_load['daily_disk_io_gb'] * 100,
            'effective_connections': min(
                single_user_load['concurrent_connections'] * 100 * connection_efficiency,
                self.connection_pool_size * 0.8  # 80% –æ—Ç –ø—É–ª–∞
            )
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        system_load.update(self._calculate_system_overhead())
        
        return system_load
        
    def _calculate_peak_cpu_load(self, single_user_load: Dict[str, float]) -> float:
        """–†–∞—Å—á–µ—Ç –ø–∏–∫–æ–≤–æ–π CPU –Ω–∞–≥—Ä—É–∑–∫–∏"""
        
        # CPU —Å–µ–∫—É–Ω–¥ –≤ –¥–µ–Ω—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cpu_per_user_per_day = single_user_load['cpu_seconds_per_day']
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –≤ 3 —Ä–∞–∑–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
        # –∏ –¥–ª–∏—Ç—Å—è 4 —á–∞—Å–∞ (14400 —Å–µ–∫—É–Ω–¥)
        peak_duration_seconds = 4 * 60 * 60
        peak_factor = 3.0
        
        # CPU –Ω–∞–≥—Ä—É–∑–∫–∞ –≤ –ø–∏–∫–æ–≤—ã–π —á–∞—Å –¥–ª—è 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        peak_cpu_seconds_per_second = (
            (cpu_per_user_per_day * 100 * peak_factor) / 
            (24 * 60 * 60)  # –°–µ–∫—É–Ω–¥ –≤ –¥–Ω–µ
        ) * peak_factor  # –ï—â–µ —Ä–∞–∑ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –ø–∏–∫–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä
        
        return peak_cpu_seconds_per_second
        
    def _calculate_system_overhead(self) -> Dict[str, float]:
        """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"""
        
        return {
            'postgresql_ram_gb': 16,      # shared_buffers + effective_cache
            'redis_ram_gb': 4,            # –ö—ç—à + –æ—á–µ—Ä–µ–¥–∏
            'system_ram_gb': 6,           # –û–° + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            'connection_pool_ram_mb': self.connection_pool_size * self.connection_overhead_mb,
            'background_cpu_cores': 4,    # PostgreSQL, Redis, —Å–∏—Å—Ç–µ–º–∞
        }

    def analyze_connection_pooling_efficiency(self) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ connection pooling"""
        
        # –ë–µ–∑ pooling (–Ω–∞–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥):
        naive_connections = 500 * 100 * 6  # –∞–∫–∫–∞—É–Ω—Ç—ã * —é–∑–µ—Ä—ã * —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        
        # –° connection pooling:
        pooled_connections = self.connection_pool_size
        
        # –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:
        ram_savings_gb = (naive_connections - pooled_connections) * self.connection_overhead_mb / 1024
        
        return {
            'naive_connections': naive_connections,
            'pooled_connections': pooled_connections,
            'connection_efficiency': pooled_connections / naive_connections,
            'ram_savings_gb': ram_savings_gb,
            'cpu_overhead_reduction': 0.6  # 60% –º–µ–Ω—å—à–µ CPU –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
        }

    def generate_detailed_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        single_ops = self.analyze_single_account_operations()
        single_user = self.calculate_daily_load_per_user()
        system_load = self.calculate_system_load_100_users()
        pooling_analysis = self.analyze_connection_pooling_efficiency()
        
        report = {
            'single_operation_analysis': {
                op_name: {
                    'cpu_seconds': op.cpu_seconds,
                    'ram_mb': op.ram_mb,
                    'disk_io_mb': op.disk_io_mb,
                    'connections': op.connections
                }
                for op_name, op in single_ops.items()
            },
            'single_user_daily_load': single_user,
            'system_load_100_users': system_load,
            'connection_pooling_analysis': pooling_analysis,
            'recommendations': self._generate_recommendations(system_load)
        }
        
        return report
        
    def _generate_recommendations(self, system_load: Dict[str, float]) -> Dict[str, str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∂–µ–ª–µ–∑—É"""
        
        required_cpu_cores = max(8, int(system_load['peak_cpu_utilization'] * 1.5))
        required_ram_gb = max(32, int(system_load['total_ram_gb'] * 1.3))
        
        recommendations = {
            'minimum_cpu_cores': f"{required_cpu_cores} cores",
            'minimum_ram_gb': f"{required_ram_gb} GB",
            'recommended_architecture': "monolith" if required_cpu_cores <= 64 else "distributed",
            'database_optimization': "PostgreSQL with connection pooling mandatory",
            'storage_type': "NVMe SSD mandatory for high IOPS",
            'network': "1Gbit/s minimum for Instagram API calls"
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:
        if required_cpu_cores <= 32 and required_ram_gb <= 64:
            recommendations['server_recommendation'] = "Hetzner AX51-NVMe (‚Ç¨39/month)"
        elif required_cpu_cores <= 64 and required_ram_gb <= 128:
            recommendations['server_recommendation'] = "Hetzner AX161 (‚Ç¨169/month)"
        else:
            recommendations['server_recommendation'] = "Distributed architecture required"
            
        return recommendations

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –†–ï–°–£–†–°–û–í INSTAGRAM –ë–û–¢–ê")
    print("=" * 80)
    
    analyzer = InstagramBotResourceAnalyzer()
    report = analyzer.generate_detailed_report()
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print("\nüìä –ê–ù–ê–õ–ò–ó –û–î–ù–û–ô –û–ü–ï–†–ê–¶–ò–ò:")
    print("-" * 40)
    for op_name, op_data in report['single_operation_analysis'].items():
        print(f"{op_name}:")
        print(f"  CPU: {op_data['cpu_seconds']:.2f} —Å–µ–∫")
        print(f"  RAM: {op_data['ram_mb']:.1f} –ú–ë")
        print(f"  –î–∏—Å–∫: {op_data['disk_io_mb']:.2f} –ú–ë")
        print(f"  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {op_data['connections']}")
        print()
    
    print("\nüë§ –ù–ê–ì–†–£–ó–ö–ê –û–î–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (500 –∞–∫–∫–∞—É–Ω—Ç–æ–≤):")
    print("-" * 50)
    user_load = report['single_user_daily_load']
    print(f"CPU –≤ –¥–µ–Ω—å: {user_load['cpu_seconds_per_day']:.0f} —Å–µ–∫—É–Ω–¥")
    print(f"–ü–∏–∫–æ–≤–∞—è RAM: {user_load['peak_ram_mb']:.0f} –ú–ë")
    print(f"–î–∏—Å–∫ –≤ –¥–µ–Ω—å: {user_load['daily_disk_io_gb']:.2f} –ì–ë")
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {user_load['concurrent_connections']}")
    
    print("\nüè≠ –°–ò–°–¢–ï–ú–ù–ê–Ø –ù–ê–ì–†–£–ó–ö–ê (100 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô):")
    print("-" * 50)
    sys_load = report['system_load_100_users']
    print(f"–ü–∏–∫–æ–≤–∞—è CPU –Ω–∞–≥—Ä—É–∑–∫–∞: {sys_load['peak_cpu_utilization']:.1f} —è–¥–µ—Ä")
    print(f"–û–±—â–∞—è RAM: {sys_load['total_ram_gb']:.1f} –ì–ë")
    print(f"–î–∏—Å–∫ –≤ –¥–µ–Ω—å: {sys_load['total_disk_io_gb_per_day']:.1f} –ì–ë")
    print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {sys_load['effective_connections']:.0f}")
    
    print("\nüîó –ê–ù–ê–õ–ò–ó CONNECTION POOLING:")
    print("-" * 40)
    pooling = report['connection_pooling_analysis']
    print(f"–ë–µ–∑ pooling: {pooling['naive_connections']:,} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    print(f"–° pooling: {pooling['pooled_connections']} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {pooling['connection_efficiency']:.1%}")
    print(f"–≠–∫–æ–Ω–æ–º–∏—è RAM: {pooling['ram_savings_gb']:.1f} –ì–ë")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 20)
    recs = report['recommendations']
    for key, value in recs.items():
        print(f"{key.replace('_', ' ').title()}: {value}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    with open('detailed_resource_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'detailed_resource_analysis.json'")
    
    return report

if __name__ == "__main__":
    main() 