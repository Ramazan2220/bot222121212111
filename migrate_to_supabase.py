#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üêò –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê SUPABASE PostgreSQL
–ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ –æ–±–ª–∞—á–Ω—ã–π PostgreSQL
"""

import logging
import os
import sqlite3
import sys
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    from sqlalchemy import create_engine, text
    from sqlalchemy.orm import sessionmaker
    
    # –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
    from database.models import Base, InstagramAccount, PublishTask, WarmupTask, TelegramUser
    from database.db_manager import DATABASE_URL as SQLITE_URL
    
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω psycopg2-binary")
    sys.exit(1)

class SupabaseMigration:
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Supabase PostgreSQL"""
    
    def __init__(self, postgres_url: str):
        self.postgres_url = postgres_url
        self.sqlite_url = SQLITE_URL
        self.migration_stats = {
            'tables_created': 0,
            'data_migrated': {},
            'errors': [],
            'start_time': datetime.now()
        }
        
    def validate_connection_strings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite
        try:
            if self.sqlite_url.startswith('sqlite:///'):
                db_file = self.sqlite_url.replace('sqlite:///', '')
                if not os.path.exists(db_file):
                    logger.error(f"‚ùå SQLite —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_file}")
                    return False
                logger.info(f"‚úÖ SQLite –Ω–∞–π–¥–µ–Ω: {db_file}")
            else:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SQLite URL: {self.sqlite_url}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SQLite: {e}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL URL
        if not self.postgres_url.startswith('postgresql://'):
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PostgreSQL URL")
            logger.info("üí° –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://user:password@host:port/database")
            return False
            
        logger.info("‚úÖ –°—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã")
        return True
        
    def test_postgres_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        logger.info("üêò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ psycopg2
            conn = psycopg2.connect(self.postgres_url)
            with conn.cursor() as cursor:
                cursor.execute("SELECT version();")
                version = cursor.fetchone()[0]
                logger.info(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {version}")
                
            conn.close()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ SQLAlchemy
            engine = create_engine(self.postgres_url)
            with engine.connect() as connection:
                result = connection.execute(text("SELECT current_database();"))
                db_name = result.fetchone()[0]
                logger.info(f"‚úÖ SQLAlchemy –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ë–î: {db_name}")
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            logger.info("   - URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
            logger.info("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç") 
            logger.info("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
            logger.info("   - –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
            
    def create_postgres_schema(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –≤ PostgreSQL"""
        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã PostgreSQL...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º engine –¥–ª—è PostgreSQL
            engine = create_engine(self.postgres_url)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            Base.metadata.create_all(engine)
            
            logger.info("‚úÖ –°—Ö–µ–º–∞ PostgreSQL —Å–æ–∑–¥–∞–Ω–∞")
            self.migration_stats['tables_created'] = len(Base.metadata.tables)
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {self.migration_stats['tables_created']}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
            self.migration_stats['errors'].append(f"Schema creation: {e}")
            return False
            
    def get_sqlite_data(self, table_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
            sqlite_engine = create_engine(self.sqlite_url)
            
            with sqlite_engine.connect() as connection:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                result = connection.execute(text(f"SELECT * FROM {table_name}"))
                rows = result.fetchall()
                
                if rows:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                    columns = result.keys()
                    data = [dict(zip(columns, row)) for row in rows]
                    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {table_name}")
                    return data
                else:
                    logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {table_name}: {e}")
            return []
            
    def migrate_table_data(self, table_name: str, model_class):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
            sqlite_data = self.get_sqlite_data(table_name)
            
            if not sqlite_data:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É: {table_name}")
                self.migration_stats['data_migrated'][table_name] = 0
                return True
                
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
            postgres_engine = create_engine(self.postgres_url)
            Session = sessionmaker(bind=postgres_engine)
            
            migrated_count = 0
            
            with Session() as session:
                for row_data in sqlite_data:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏
                        obj = model_class(**row_data)
                        session.add(obj)
                        migrated_count += 1
                        
                        # –ö–æ–º–º–∏—Ç–∏–º –±–∞—Ç—á–∞–º–∏ –ø–æ 100 –∑–∞–ø–∏—Å–µ–π
                        if migrated_count % 100 == 0:
                            session.commit()
                            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count}/{len(sqlite_data)} –∑–∞–ø–∏—Å–µ–π")
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
                        session.rollback()
                        continue
                        
                # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
                session.commit()
                
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: {migrated_count}/{len(sqlite_data)} –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            self.migration_stats['data_migrated'][table_name] = migrated_count
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {table_name}: {e}")
            self.migration_stats['errors'].append(f"{table_name}: {e}")
            return False
            
    def verify_migration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
            postgres_engine = create_engine(self.postgres_url)
            
            with postgres_engine.connect() as connection:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                for table_name, expected_count in self.migration_stats['data_migrated'].items():
                    result = connection.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                    actual_count = result.fetchone()[0]
                    
                    if actual_count == expected_count:
                        logger.info(f"‚úÖ {table_name}: {actual_count} –∑–∞–ø–∏—Å–µ–π –û–ö")
                    else:
                        logger.error(f"‚ùå {table_name}: –æ–∂–∏–¥–∞–ª–∏ {expected_count}, –ø–æ–ª—É—á–∏–ª–∏ {actual_count}")
                        
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False
            
    def print_migration_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        end_time = datetime.now()
        duration = (end_time - self.migration_stats['start_time']).total_seconds()
        
        logger.info("=" * 80)
        logger.info("üêò –ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò –ù–ê SUPABASE PostgreSQL")
        logger.info("=" * 80)
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {self.migration_stats['tables_created']}")
        
        logger.info("üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        total_records = 0
        for table_name, count in self.migration_stats['data_migrated'].items():
            logger.info(f"   {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            total_records += count
            
        logger.info(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        
        if self.migration_stats['errors']:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {len(self.migration_stats['errors'])}")
            for error in self.migration_stats['errors']:
                logger.warning(f"   - {error}")
        else:
            logger.info("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç!")
            
        logger.info("=" * 80)
        
    def run_full_migration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ" * 80)
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –ù–ê SUPABASE PostgreSQL")
        logger.info("üöÄ" * 80)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if not self.validate_connection_strings():
            logger.error("üí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return False
            
        if not self.test_postgres_connection():
            logger.error("üí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
            return False
            
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã
        if not self.create_postgres_schema():
            logger.error("üí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É")
            return False
            
        # 3. –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        tables_to_migrate = [
            ('telegram_users', TelegramUser),
            ('instagram_accounts', InstagramAccount),
            ('publish_tasks', PublishTask),
            ('warmup_tasks', WarmupTask),
        ]
        
        success_count = 0
        
        for table_name, model_class in tables_to_migrate:
            if self.migrate_table_data(table_name, model_class):
                success_count += 1
                
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.verify_migration()
        
        # 5. –ò—Ç–æ–≥–∏
        self.print_migration_summary()
        
        if success_count == len(tables_to_migrate):
            logger.info("üèÜ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            logger.info("üéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ PostgreSQL!")
            return True
        else:
            logger.error("üí• –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò!")
            logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üêò –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê SUPABASE PostgreSQL")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º URL PostgreSQL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    postgres_url = input("–í–≤–µ–¥–∏—Ç–µ PostgreSQL URL –æ—Ç Supabase: ").strip()
    
    if not postgres_url:
        logger.error("‚ùå PostgreSQL URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    migration = SupabaseMigration(postgres_url)
    success = migration.run_full_migration()
    
    if success:
        print("\nüéâ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –û–±–Ω–æ–≤–∏—Ç–µ config.py:")
        print(f"   DATABASE_URL = '{postgres_url}'")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")
        print("3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞ PostgreSQL")
        exit(0)
    else:
        print("\nüí• –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        exit(1)

if __name__ == "__main__":
    main() 