#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–û–î –ù–ê–ì–†–£–ó–ö–û–ô üî•
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
"""

import logging
import random
import time
import threading
import asyncio
import concurrent.futures
from typing import List, Dict, Any, Set
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
import gc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from database.db_manager import init_db, get_session
from database.models import InstagramAccount, PublishTask, TaskType, WarmupTask, WarmupStatus
from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
from database.user_management import get_active_users, get_user_info
from utils.user_cache import get_user_cache
from utils.processing_state import ProcessingState

class ExtremeIsolationLoadTest:
    """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    
    def __init__(self):
        self.violations = []
        self.cross_contaminations = []
        self.start_time = datetime.now()
        self.operations_count = 0
        self.errors_count = 0
        self.test_users = []
        
    def setup_test_environment(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üî• –ü–û–î–ì–û–¢–û–í–ö–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø—É–ª–æ–º
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø—É–ª–æ–º –≥–æ—Ç–æ–≤–∞!")
        
        # –°–æ–∑–¥–∞–µ–º 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑—É–º–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        user_count = 20
        accounts_per_user = 10  # –†–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        logger.info(f"üî• –°–æ–∑–¥–∞—é {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å {accounts_per_user} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∫–∞–∂–¥—ã–π")
        
        created_users = 0
        created_accounts = 0
        created_tasks = 0
        
        for i in range(user_count):
            user_id = 6000000 + i  # –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            user_accounts = []
            
            try:
                with get_session() as session:
                    # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for j in range(accounts_per_user):
                        username = f"extreme_load_{i}_{j}_{random.randint(1000, 9999)}"
                        
                        account = InstagramAccount(
                            user_id=user_id,
                            username=username,
                            password=f"pass_{user_id}_{j}",
                            email=f"{username}@extreme.test",
                            status='active',
                            is_active=True,
                            full_name=f"Extreme Load Test {i}-{j}",
                            biography=f"Extreme load test account for user {i}"
                        )
                        
                        session.add(account)
                        session.flush()
                        
                        user_accounts.append(account.id)
                        created_accounts += 1
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        for task_type in [TaskType.PHOTO, TaskType.VIDEO]:
                            task = PublishTask(
                                user_id=user_id,
                                account_id=account.id,
                                task_type=task_type,
                                caption=f"Extreme test {task_type.value} from user {i}",
                                scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 48))
                            )
                            session.add(task)
                            created_tasks += 1
                            
                    session.commit()
                    
                self.test_users.append({
                    'user_id': user_id,
                    'name': f"ExtremeUser_{i}",
                    'accounts': user_accounts
                })
                created_users += 1
                
                if i % 5 == 0:
                    logger.info(f"üî• –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {i+1}/{user_count}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {e}")
                
        logger.info(f"‚úÖ –¢–ï–°–¢–û–í–û–ï –û–ö–†–£–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û:")
        logger.info(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {created_users}")
        logger.info(f"   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {created_accounts}")
        logger.info(f"   üìã –ó–∞–¥–∞—á: {created_tasks}")
        
        return created_users > 0
        
    def extreme_concurrent_isolation_test(self, duration_minutes: int = 5):
        """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º"""
        logger.info(f"üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û–ì–û –î–û–°–¢–£–ü–ê ({duration_minutes} –º–∏–Ω—É—Ç)")
        
        violations = []
        operations = 0
        errors = 0
        
        end_time = datetime.now() + timedelta(minutes=duration_minutes)
        
        def extreme_isolation_worker(worker_id: int):
            nonlocal violations, operations, errors
            worker_violations = []
            worker_operations = 0
            worker_errors = 0
            
            logger.info(f"üî• –í–æ—Ä–∫–µ—Ä {worker_id}: —Å—Ç–∞—Ä—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            while datetime.now() < end_time:
                try:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    test_user = random.choice(self.test_users)
                    user_id = test_user['user_id']
                    
                    # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
                    for operation_type in range(5):  # 5 —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
                        try:
                            if operation_type == 0:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                accounts = get_user_instagram_accounts(user_id=user_id)
                                
                                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –¢–û–õ–¨–ö–û —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                for account in accounts:
                                    if account.user_id != user_id:
                                        worker_violations.append({
                                            'type': 'cross_user_account_access',
                                            'worker_id': worker_id,
                                            'requested_user': user_id,
                                            'received_account_user': account.user_id,
                                            'account_id': account.id,
                                            'timestamp': datetime.now()
                                        })
                                        
                            elif operation_type == 1:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                if test_user['accounts']:
                                    account_id = random.choice(test_user['accounts'])
                                    account = get_user_instagram_account(account_id=account_id, user_id=user_id)
                                    
                                    if account and account.user_id != user_id:
                                        worker_violations.append({
                                            'type': 'wrong_user_account_returned',
                                            'worker_id': worker_id,
                                            'requested_user': user_id,
                                            'returned_account_user': account.user_id,
                                            'account_id': account_id
                                        })
                                        
                            elif operation_type == 2:
                                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç
                                other_user = random.choice([u for u in self.test_users if u['user_id'] != user_id])
                                if other_user['accounts']:
                                    foreign_account_id = random.choice(other_user['accounts'])
                                    result = get_user_instagram_account(account_id=foreign_account_id, user_id=user_id)
                                    
                                    # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                                    if result is not None:
                                        worker_violations.append({
                                            'type': 'access_to_foreign_account',
                                            'worker_id': worker_id,
                                            'requesting_user': user_id,
                                            'foreign_user': other_user['user_id'],
                                            'foreign_account_id': foreign_account_id
                                        })
                                        
                            elif operation_type == 3:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                                user_info = get_user_info(user_id=user_id)
                                if user_info and user_info.get('user_id') != user_id:
                                    worker_violations.append({
                                        'type': 'wrong_user_info_returned',
                                        'worker_id': worker_id,
                                        'requested_user': user_id,
                                        'returned_user': user_info.get('user_id')
                                    })
                                    
                            elif operation_type == 4:
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                with get_session() as session:
                                    tasks = session.query(PublishTask).filter_by(user_id=user_id).limit(5).all()
                                    
                                    for task in tasks:
                                        if task.user_id != user_id:
                                            worker_violations.append({
                                                'type': 'cross_user_task_access',
                                                'worker_id': worker_id,
                                                'requested_user': user_id,
                                                'task_user': task.user_id,
                                                'task_id': task.id
                                            })
                                            
                            worker_operations += 1
                            
                        except Exception as e:
                            worker_errors += 1
                            if worker_errors % 100 == 0:
                                logger.warning(f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {worker_id}: {worker_errors} –æ—à–∏–±–æ–∫")
                            
                    # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ SQLite
                    time.sleep(0.001)
                    
                except Exception as e:
                    worker_errors += 1
                    
            logger.info(f"üî• –í–æ—Ä–∫–µ—Ä {worker_id}: –∑–∞–≤–µ—Ä—à–µ–Ω. –û–ø–µ—Ä–∞—Ü–∏–π: {worker_operations}, –æ—à–∏–±–æ–∫: {worker_errors}, –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(worker_violations)}")
            return worker_violations, worker_operations, worker_errors
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        num_workers = 50  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        logger.info(f"üî• –ó–∞–ø—É—Å–∫–∞—é {num_workers} –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        with ThreadPoolExecutor(max_workers=num_workers) as executor:
            futures = [executor.submit(extreme_isolation_worker, i) for i in range(num_workers)]
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(futures):
                try:
                    worker_violations, worker_operations, worker_errors = future.result()
                    violations.extend(worker_violations)
                    operations += worker_operations
                    errors += worker_errors
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
                    errors += 1
                    
        self.operations_count += operations
        self.errors_count += errors
        self.violations.extend(violations)
        
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:")
        logger.info(f"   üî• –û–ø–µ—Ä–∞—Ü–∏–π: {operations:,}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {errors:,}")
        logger.info(f"   üö® –ù–ê–†–£–®–ï–ù–ò–ô –ò–ó–û–õ–Ø–¶–ò–ò: {len(violations)}")
        
        if violations:
            logger.error("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ê–†–£–®–ï–ù–ò–Ø –ò–ó–û–õ–Ø–¶–ò–ò:")
            for v in violations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                logger.error(f"   - {v}")
                
        return len(violations) == 0
        
    def extreme_system_services_test(self):
        """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        logger.info("üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ù–´–• –°–ï–†–í–ò–°–û–í")
        
        violations = []
        
        def stress_system_services():
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
                cache = get_user_cache()
                
                for _ in range(100):  # 100 –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –≤–æ—Ä–∫–µ—Ä
                    users = cache.get_active_users_safe()
                    priority_users = cache.get_users_by_priority_safe()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏—è
                    if users and priority_users:
                        user_ids = set(users)
                        priority_ids = set(priority_users)
                        
                        # –í—Å–µ priority –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                        if not priority_ids.issubset(user_ids):
                            violations.append({
                                'type': 'cache_inconsistency',
                                'missing_users': list(priority_ids - user_ids)
                            })
                            
                    time.sleep(0.001)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        with ThreadPoolExecutor(max_workers=20) as executor:
            futures = [executor.submit(stress_system_services) for _ in range(20)]
            
            for future in as_completed(futures):
                future.result()
                
        logger.info(f"üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {len(violations)} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
        self.violations.extend(violations)
        
        return len(violations) == 0
        
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—â–∞—é —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        deleted_accounts = 0
        deleted_tasks = 0
        
        try:
            # –£–¥–∞–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            batch_size = 50
            
            for i in range(0, len(self.test_users), batch_size):
                batch_users = self.test_users[i:i+batch_size]
                batch_user_ids = [u['user_id'] for u in batch_users]
                
                with get_session() as session:
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏
                    deleted_tasks += session.query(PublishTask).filter(
                        PublishTask.user_id.in_(batch_user_ids)
                    ).delete(synchronize_session=False)
                    
                    # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
                    deleted_accounts += session.query(InstagramAccount).filter(
                        InstagramAccount.user_id.in_(batch_user_ids)
                    ).delete(synchronize_session=False)
                    
                    session.commit()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {deleted_tasks} –∑–∞–¥–∞—á")
        
    def analyze_extreme_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("=" * 100)
        logger.info("üî• –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò –ü–û–î –ù–ê–ì–†–£–ó–ö–û–ô")
        logger.info("=" * 100)
        
        total_time = (datetime.now() - self.start_time).total_seconds()
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥ ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
        logger.info(f"üî• –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {self.operations_count:,}")
        logger.info(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.errors_count:,}")
        logger.info(f"üìä –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {self.operations_count / total_time:.1f}")
        
        total_violations = len(self.violations)
        logger.info(f"üö® –í–°–ï–ì–û –ù–ê–†–£–®–ï–ù–ò–ô –ò–ó–û–õ–Ø–¶–ò–ò: {total_violations}")
        
        if total_violations == 0:
            logger.info("üèÜ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ò–ó–û–õ–Ø–¶–ò–ò –ü–†–û–ô–î–ï–ù–´!")
            logger.info("üî• –°–ò–°–¢–ï–ú–ê –í–´–î–ï–†–ñ–ê–õ–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–£–Æ –ù–ê–ì–†–£–ó–ö–£!")
            logger.info("üöÄ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ù–ï –°–ú–ï–®–ò–í–ê–Æ–¢–°–Ø!")
        else:
            logger.error("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ê–†–£–®–ï–ù–ò–Ø –ò–ó–û–õ–Ø–¶–ò–ò!")
            logger.error(f"üí• {total_violations} —Å–ª—É—á–∞–µ–≤ —Å–º–µ—à–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π
            violation_types = {}
            for v in self.violations:
                v_type = v.get('type', 'unknown')
                violation_types[v_type] = violation_types.get(v_type, 0) + 1
                
            logger.error("üìä –¢–∏–ø—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π:")
            for v_type, count in violation_types.items():
                logger.error(f"   - {v_type}: {count}")
                
        logger.info("=" * 100)
        
        return total_violations == 0
        
    def run_extreme_isolation_load_test(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        logger.info("üî•" * 80)
        logger.info("üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–û–î –ù–ê–ì–†–£–ó–ö–û–ô")
        logger.info("üî• –ü–†–û–í–ï–†–Ø–ï–ú –°–ú–ï–®–ò–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –ü–†–ò –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –ù–ê–ì–†–£–ó–ö–ï")
        logger.info("üî•" * 80)
        
        try:
            # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not self.setup_test_environment():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
                return False
                
            # 2. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            concurrent_ok = self.extreme_concurrent_isolation_test(duration_minutes=3)
            
            # 3. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            services_ok = self.extreme_system_services_test()
            
            # 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            success = self.analyze_extreme_results()
            
            return success and concurrent_ok and services_ok
            
        except KeyboardInterrupt:
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_test_data()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("üî• –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...")
    
    test = ExtremeIsolationLoadTest()
    success = test.run_extreme_isolation_load_test()
    
    if success:
        logger.info("üèÜ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        logger.info("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –õ–Æ–ë–û–ô –ù–ê–ì–†–£–ó–ö–ï!")
        exit(0)
    else:
        logger.error("üí• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        logger.error("üõë –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ó–û–õ–Ø–¶–ò–ï–ô!")
        exit(1)

if __name__ == "__main__":
    main() 