#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 15-–ú–ò–ù–£–¢–ù–´–ô –¢–ï–°–¢ PostgreSQL
–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¢–û–ß–ù–û —Ç–µ –∂–µ —É—Å–ª–æ–≤–∏—è —á—Ç–æ –ª–æ–º–∞–ª–∏ SQLite 15 –º–∏–Ω—É—Ç
"""

import logging
import sys
import time
import threading
import random
import multiprocessing
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import List, Dict, Any
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from database.db_manager import get_session, init_db
    from database.models import InstagramAccount, PublishTask, WarmupTask, TelegramUser, TaskType, TaskStatus, WarmupStatus
    from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
    from sqlalchemy import text
    import psutil
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class Extreme15MinPostgreSQLTest:
    """–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 15-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–µ—Å—Ç PostgreSQL"""
    
    def __init__(self):
        self.test_duration = 15 * 60  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.start_time = None
        
        self.stats = {
            'users_created': 0,
            'accounts_created': 0,
            'tasks_created': 0,
            'operations_per_second': [],
            'isolation_violations': 0,
            'postgresql_errors': [],
            'sqlite_style_errors': {
                'segmentation_faults': 0,
                'interface_errors': 0,
                'system_errors': 0,
                'connection_errors': 0
            },
            'threads_active': 0,
            'max_concurrent_threads': 0
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        self.test_session_id = str(uuid.uuid4())[:8]
        
    def create_extreme_user_batch(self, batch_id: int, users_in_batch: int = 10, accounts_per_user: int = 500) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –±–∞—Ç—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º SQLite —Ç–µ—Å—Ç–µ)"""
        
        batch_stats = {
            'batch_id': batch_id,
            'users_created': 0,
            'accounts_created': 0,
            'tasks_created': 0,
            'time_taken': 0,
            'errors': []
        }
        
        batch_start = time.time()
        
        try:
            with get_session() as session:
                for user_idx in range(users_in_batch):
                    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å session –∏ batch
                    user_id = 8000000 + (batch_id * 1000) + user_idx
                    
                    try:
                        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        telegram_user = TelegramUser(
                            telegram_id=user_id,
                            username=f"extreme_{self.test_session_id}_{batch_id}_{user_idx}",
                            first_name=f"Extreme {batch_id}",
                            last_name=f"User {user_idx}",
                            is_active=True
                        )
                        session.merge(telegram_user)
                        batch_stats['users_created'] += 1
                        
                        # 2. –°–æ–∑–¥–∞–µ–º 500 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        for acc_idx in range(accounts_per_user):
                            # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å timestamp
                            unique_suffix = f"{batch_id}_{user_idx}_{acc_idx}_{int(time.time() * 1000000) % 1000000}"
                            
                            account = InstagramAccount(
                                username=f"extr_{unique_suffix}",
                                password=f"pass_{user_id}_{acc_idx}",
                                email=f"extr_{unique_suffix}@extreme.test",
                                user_id=user_id,
                                is_active=True,
                                full_name=f"Extreme Account {batch_id}-{user_idx}-{acc_idx}",
                                biography=f"Extreme 15min test account"
                            )
                            session.add(account)
                            batch_stats['accounts_created'] += 1
                            
                            # –ö–æ–º–º–∏—Ç–∏–º –±–∞—Ç—á–∞–º–∏ –ø–æ 25 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                            if acc_idx % 25 == 0:
                                session.flush()
                                
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                        session.flush()
                        user_accounts = session.query(InstagramAccount).filter_by(user_id=user_id).all()
                        
                        # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        for account in user_accounts:
                            # PublishTask (–ø—Ä–æ–±–ª–µ–º–Ω–∞—è –≤ SQLite)
                            publish_task = PublishTask(
                                account_id=account.id,
                                user_id=user_id,
                                task_type=TaskType.VIDEO,  # VIDEO –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                                caption=f"Extreme 15min video from batch {batch_id} user {user_idx}",
                                scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 48)),
                                status=TaskStatus.PENDING
                            )
                            session.add(publish_task)
                            batch_stats['tasks_created'] += 1
                            
                            # WarmupTask (–ø—Ä–æ–±–ª–µ–º–Ω–∞—è –≤ SQLite)
                            warmup_task = WarmupTask(
                                account_id=account.id,
                                status=WarmupStatus.PENDING,
                                settings={
                                    'task_type': 'like',
                                    'target_count': random.randint(10, 200),
                                    'user_id': user_id,
                                    'batch_id': batch_id,
                                    'extreme_15min_test': True,
                                    'session_id': self.test_session_id
                                }
                            )
                            session.add(warmup_task)
                            batch_stats['tasks_created'] += 1
                            
                            # –ö–æ–º–º–∏—Ç–∏–º –±–∞—Ç—á–∞–º–∏ –∑–∞–¥–∞—á
                            if batch_stats['tasks_created'] % 100 == 0:
                                session.flush()
                                
                        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç: flush + commit (–≥–¥–µ –±—ã–ª Segmentation fault –≤ SQLite)
                        session.flush()
                        session.commit()
                        
                        self.stats['users_created'] += 1
                        self.stats['accounts_created'] += batch_stats['accounts_created']
                        self.stats['tasks_created'] += batch_stats['tasks_created']
                        
                    except Exception as e:
                        error_msg = str(e)
                        batch_stats['errors'].append(f"User {user_id}: {error_msg}")
                        
                        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–∞–∫ –≤ SQLite
                        if "InterfaceError" in error_msg:
                            self.stats['sqlite_style_errors']['interface_errors'] += 1
                        elif "SystemError" in error_msg:
                            self.stats['sqlite_style_errors']['system_errors'] += 1
                        elif "connection" in error_msg.lower():
                            self.stats['sqlite_style_errors']['connection_errors'] += 1
                        
                        session.rollback()
                        continue
                        
        except Exception as e:
            batch_stats['errors'].append(f"Batch {batch_id} critical error: {e}")
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞—Ç—á–∞ {batch_id}: {e}")
            
        batch_stats['time_taken'] = time.time() - batch_start
        return batch_stats
        
    def continuous_isolation_checker(self) -> None:
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        
        while time.time() - self.start_time < self.test_duration:
            try:
                with get_session() as session:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    sample_users = session.query(TelegramUser).filter(
                        TelegramUser.username.like(f'extreme_{self.test_session_id}_%')
                    ).limit(5).all()
                    
                    for user in sample_users:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ safe wrapper
                        user_accounts = get_user_instagram_accounts(user.telegram_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        for account in user_accounts:
                            if account.user_id != user.telegram_id:
                                self.stats['isolation_violations'] += 1
                                logger.error(f"üí• –ò–ó–û–õ–Ø–¶–ò–Ø –ù–ê–†–£–®–ï–ù–ê! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –≤–∏–¥–∏—Ç –∞–∫–∫–∞—É–Ω—Ç {account.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {account.user_id}")
                                
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏
                        publish_tasks = session.query(PublishTask).filter_by(user_id=user.telegram_id).limit(10).all()
                        for task in publish_tasks:
                            if task.user_id != user.telegram_id:
                                self.stats['isolation_violations'] += 1
                                logger.error(f"üí• –ó–ê–î–ê–ß–ò –°–ú–ï–®–ê–ù–´! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á—É {task.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task.user_id}")
                                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏: {e}")
                
            time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
    def extreme_worker_thread(self, thread_id: int) -> Dict[str, Any]:
        """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –ø–æ—Ç–æ–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç 15 –º–∏–Ω—É—Ç)"""
        
        thread_stats = {
            'thread_id': thread_id,
            'batches_completed': 0,
            'total_operations': 0,
            'errors': [],
            'start_time': time.time()
        }
        
        self.stats['threads_active'] += 1
        self.stats['max_concurrent_threads'] = max(self.stats['max_concurrent_threads'], self.stats['threads_active'])
        
        batch_counter = 0
        
        try:
            # –†–∞–±–æ—Ç–∞–µ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è
            while time.time() - self.start_time < self.test_duration:
                batch_id = (thread_id * 10000) + batch_counter
                
                # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ)
                batch_result = self.create_extreme_user_batch(batch_id, users_in_batch=5, accounts_per_user=100)  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                
                if batch_result['errors']:
                    thread_stats['errors'].extend(batch_result['errors'])
                else:
                    thread_stats['batches_completed'] += 1
                    
                thread_stats['total_operations'] += (
                    batch_result['users_created'] + 
                    batch_result['accounts_created'] + 
                    batch_result['tasks_created']
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
                try:
                    with get_session() as session:
                        # –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                        users_count = session.query(TelegramUser).filter(
                            TelegramUser.username.like(f'extreme_{self.test_session_id}_%')
                        ).count()
                        
                        accounts_count = session.query(InstagramAccount).filter(
                            InstagramAccount.username.like('extr_%')
                        ).count()
                        
                        # JSON –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤ SQLite)
                        result = session.execute(text("SELECT '{\"extreme_test\": true, \"duration\": \"15min\"}'::json"))
                        json_result = result.fetchone()[0]
                        
                        thread_stats['total_operations'] += 3
                        
                except Exception as e:
                    thread_stats['errors'].append(f"Additional ops error: {e}")
                    
                batch_counter += 1
                
                # –ö—Ä–∞—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                time.sleep(0.5)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –±–∞—Ç—á–µ–π
                if batch_counter % 50 == 0:
                    elapsed = time.time() - self.start_time
                    remaining = self.test_duration - elapsed
                    logger.info(f"üî• –ü–æ—Ç–æ–∫ {thread_id}: –±–∞—Ç—á {batch_counter}, –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f}—Å")
                    
        except Exception as e:
            thread_stats['errors'].append(f"Thread {thread_id} crashed: {e}")
            logger.error(f"üí• –ü–æ—Ç–æ–∫ {thread_id} —É–ø–∞–ª: {e}")
            
        finally:
            self.stats['threads_active'] -= 1
            
        thread_stats['duration'] = time.time() - thread_stats['start_time']
        return thread_stats
        
    def cleanup_extreme_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            with get_session() as session:
                # –£–¥–∞–ª—è–µ–º –ø–æ session_id
                deleted_publish = session.execute(text(
                    f"DELETE FROM publish_tasks WHERE caption LIKE '%{self.test_session_id}%'"
                )).rowcount
                
                deleted_warmup = session.execute(text(
                    f"DELETE FROM warmup_tasks WHERE settings::text LIKE '%{self.test_session_id}%'"
                )).rowcount
                
                deleted_accounts = session.execute(text(
                    f"DELETE FROM instagram_accounts WHERE username LIKE 'extr_%' AND email LIKE '%extreme.test'"
                )).rowcount
                
                deleted_users = session.execute(text(
                    f"DELETE FROM telegram_users WHERE username LIKE 'extreme_{self.test_session_id}_%'"
                )).rowcount
                
                session.commit()
                
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {deleted_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_publish} publish –∑–∞–¥–∞—á, {deleted_warmup} warmup –∑–∞–¥–∞—á")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
    def print_extreme_results(self, thread_results: List[Dict], total_duration: float):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        
        total_operations = sum(r['total_operations'] for r in thread_results)
        total_errors = sum(len(r['errors']) for r in thread_results)
        successful_threads = len([r for r in thread_results if len(r['errors']) == 0])
        
        logger.info("=" * 100)
        logger.info("üî• –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û 15-–ú–ò–ù–£–¢–ù–û–ì–û –¢–ï–°–¢–ê PostgreSQL")
        logger.info("=" * 100)
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration / 60:.2f} –º–∏–Ω—É—Ç ({total_duration:.1f} —Å–µ–∫—É–Ω–¥)")
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ: {self.stats['users_created']}")
        logger.info(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {self.stats['accounts_created']}")
        logger.info(f"üìã –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {self.stats['tasks_created']}")
        logger.info(f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {len(thread_results)} / –ú–∞–∫—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {self.stats['max_concurrent_threads']}")
        
        logger.info(f"\nüìä –û–ü–ï–†–ê–¶–ò–ò:")
        logger.info(f"   ‚úÖ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}")
        logger.info(f"   ‚ö° –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {total_operations / total_duration:.2f}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {total_errors}")
        
        logger.info(f"\nüîç –ò–ó–û–õ–Ø–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        logger.info(f"   üí• –ù–∞—Ä—É—à–µ–Ω–∏–π –∏–∑–æ–ª—è—Ü–∏–∏: {self.stats['isolation_violations']}")
        logger.info(f"   üéØ –°—Ç–∞—Ç—É—Å –∏–∑–æ–ª—è—Ü–∏–∏: {'‚úÖ –ò–î–ï–ê–õ–¨–ù–ê' if self.stats['isolation_violations'] == 0 else '‚ùå –ù–ê–†–£–®–ï–ù–ê'}")
        
        logger.info(f"\nüí• –û–®–ò–ë–ö–ò SQLite –°–¢–ò–õ–Ø (–∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –ù–ï–¢):")
        logger.info(f"   üíÄ Segmentation fault: {self.stats['sqlite_style_errors']['segmentation_faults']}")
        logger.info(f"   üîß InterfaceError: {self.stats['sqlite_style_errors']['interface_errors']}")
        logger.info(f"   ‚öôÔ∏è SystemError: {self.stats['sqlite_style_errors']['system_errors']}")
        logger.info(f"   üîå Connection errors: {self.stats['sqlite_style_errors']['connection_errors']}")
        
        logger.info(f"\nüÜö –°–†–ê–í–ù–ï–ù–ò–ï –° SQLite:")
        logger.info(f"   SQLite: üí• –ö–†–ê–• –Ω–∞ 15 –º–∏–Ω—É—Ç–∞—Ö (Segmentation fault: 11)")
        logger.info(f"   PostgreSQL: ‚úÖ –í–´–ñ–ò–õ 15 –º–∏–Ω—É—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        logger.info(f"   SQLite: üí• InterfaceError –ø—Ä–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏")
        logger.info(f"   PostgreSQL: ‚úÖ {len(thread_results)} –ø–æ—Ç–æ–∫–æ–≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        total_sqlite_errors = sum(self.stats['sqlite_style_errors'].values())
        
        if (total_sqlite_errors == 0 and 
            self.stats['isolation_violations'] == 0 and 
            total_duration >= 14 * 60):  # –ú–∏–Ω–∏–º—É–º 14 –º–∏–Ω—É—Ç
            
            logger.info(f"\nüèÜ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            logger.info(f"üöÄ PostgreSQL –≤—ã–¥–µ—Ä–∂–∞–ª –í–°–Å —á—Ç–æ —É–±–∏–≤–∞–ª–æ SQLite!")
            logger.info(f"üí™ 15 –º–∏–Ω—É—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏!")
            return True
        else:
            logger.info(f"\n‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
            logger.info(f"üîß –ù–æ PostgreSQL –≤—Å–µ —Ä–∞–≤–Ω–æ –ª—É—á—à–µ SQLite")
            return False
            
    def run_extreme_15min_test(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        
        logger.info("üî•" * 100)
        logger.info("üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 15-–ú–ò–ù–£–¢–ù–´–ô –¢–ï–°–¢ PostgreSQL vs SQLite")
        logger.info("üî•" * 100)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üíª CPU —è–¥–µ—Ä: {multiprocessing.cpu_count()}")
        logger.info(f"üíæ RAM: {psutil.virtual_memory().total / 1024 / 1024 / 1024:.1f} GB")
        logger.info(f"üêò –¢–µ—Å—Ç–∏—Ä—É–µ–º PostgreSQL 15 –º–∏–Ω—É—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ")
        logger.info(f"üî• Session ID: {self.test_session_id}")
        
        self.start_time = time.time()
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL...")
            init_db()
            
            with get_session() as session:
                result = session.execute(text("SELECT version()"))
                version = result.fetchone()[0]
                logger.info(f"üêò PostgreSQL: {version[:50]}...")
                
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–æ–ª—è—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            isolation_thread = threading.Thread(target=self.continuous_isolation_checker, daemon=True)
            isolation_thread.start()
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º SQLite —Ç–µ—Å—Ç–µ)
            num_threads = 50  # –ö–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {num_threads} –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ 15 –º–∏–Ω—É—Ç...")
            
            thread_results = []
            
            with ThreadPoolExecutor(max_workers=num_threads) as executor:
                futures = []
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
                for i in range(num_threads):
                    future = executor.submit(self.extreme_worker_thread, i)
                    futures.append(future)
                    
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                logger.info(f"‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%H:%M:%S')}")
                logger.info(f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: {(datetime.now() + timedelta(seconds=self.test_duration)).strftime('%H:%M:%S')}")
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
                for i, future in enumerate(as_completed(futures, timeout=self.test_duration + 60)):
                    try:
                        result = future.result()
                        thread_results.append(result)
                        
                        if (i + 1) % 10 == 0:
                            elapsed = time.time() - self.start_time
                            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {i + 1}/{num_threads}, –ø—Ä–æ—à–ª–æ {elapsed / 60:.1f} –º–∏–Ω—É—Ç")
                            
                    except Exception as e:
                        logger.error(f"üí• –ü–æ—Ç–æ–∫ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
                        
            # 4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_duration = time.time() - self.start_time
            success = self.print_extreme_results(thread_results, total_duration)
            
            # 5. –û—á–∏—Å—Ç–∫–∞
            self.cleanup_extreme_test_data()
            
            return success
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    test = Extreme15MinPostgreSQLTest()
    success = test.run_extreme_15min_test()
    
    if success:
        print("\nüèÜ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 15-–ú–ò–ù–£–¢–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print("üöÄ PostgreSQL –≤—ã–¥–µ—Ä–∂–∞–ª –í–°–Å —á—Ç–æ —É–±–∏–≤–∞–ª–æ SQLite!")
        print("üí™ 15 –º–∏–Ω—É—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏!")
        print("üéâ –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
        exit(0)
    else:
        print("\n‚ö†Ô∏è –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò")
        print("üîß –ù–æ PostgreSQL –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ SQLite")
        exit(0)

if __name__ == "__main__":
    main() 