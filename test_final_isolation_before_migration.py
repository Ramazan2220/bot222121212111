#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–ï–†–ï–î –ú–ò–ì–†–ê–¶–ò–ï–ô
–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ –Ω–∞ SQLite
"""

import logging
import random
import threading
import time
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from database.db_manager import get_session
from database.models import InstagramAccount, PublishTask, TelegramUser, TaskType
from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account

class FinalIsolationTest:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.test_users = []
        self.created_data = {'users': [], 'accounts': [], 'tasks': []}
        self.start_time = datetime.now()
        
    def create_test_users(self, count: int = 5):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üë• –°–æ–∑–¥–∞—é {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        base_user_id = 9000000  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Ç–µ—Å—Ç–∞
        
        for i in range(count):
            user_id = base_user_id + i
            
            with get_session() as session:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = TelegramUser(
                    user_id=user_id,
                    username=f"test_user_{i+1}",
                    first_name=f"TestUser{i+1}",
                    is_active=True,
                    created_at=datetime.now()
                )
                session.add(user)
                session.commit()
                session.refresh(user)
                
                self.test_users.append(user_id)
                self.created_data['users'].append(user_id)
                
                # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for j in range(3):  # 3 –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    account = InstagramAccount(
                        user_id=user_id,
                        username=f"test_acc_{user_id}_{j+1}",
                        password=f"pass_{user_id}_{j+1}",
                        email=f"test_{user_id}_{j+1}@test.com",
                        full_name=f"Test Account {user_id}-{j+1}",
                        biography="Final isolation test account",
                        is_active=True
                    )
                    session.add(account)
                    session.commit()
                    session.refresh(account)
                    
                    self.created_data['accounts'].append(account.id)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
                    task = PublishTask(
                        user_id=user_id,
                        account_id=account.id,
                        task_type=TaskType.PHOTO,
                        caption=f"Test post from user {user_id}",
                        scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 24))
                    )
                    session.add(task)
                    session.commit()
                    session.refresh(task)
                    
                    self.created_data['tasks'].append(task.id)
                    
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {len(self.test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(self.created_data['accounts'])} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {len(self.created_data['tasks'])} –∑–∞–¥–∞—á")
        
    def test_basic_isolation(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏"""
        logger.info("üîí –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è")
        
        violations = 0
        
        for user_id in self.test_users:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_accounts = get_user_instagram_accounts(user_id)
            
            for account in user_accounts:
                if account.user_id != user_id:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∞–∫–∫–∞—É–Ω—Ç {account.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {account.user_id}")
                    violations += 1
                    
        if violations == 0:
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è: –ü–†–û–ô–î–ï–ù–û")
            return True
        else:
            logger.error(f"‚ùå –ë–∞–∑–æ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è: {violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            return False
            
    def test_concurrent_access(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        logger.info("üîí –¢–ï–°–¢ 2: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        
        violations = 0
        results = {}
        
        def worker(user_id):
            try:
                accounts = get_user_instagram_accounts(user_id)
                results[user_id] = [acc.id for acc in accounts]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for account in accounts:
                    if account.user_id != user_id:
                        logger.error(f"‚ùå Concurrent: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç {account.id}")
                        nonlocal violations
                        violations += 1
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ worker {user_id}: {e}")
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=len(self.test_users)) as executor:
            futures = [executor.submit(worker, user_id) for user_id in self.test_users]
            
            for future in futures:
                future.result()
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        all_account_ids = []
        for user_id, account_ids in results.items():
            for account_id in account_ids:
                if account_id in all_account_ids:
                    logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_id} –ø–æ—è–≤–∏–ª—Å—è —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    violations += 1
                all_account_ids.append(account_id)
                
        if violations == 0:
            logger.info("‚úÖ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: –ü–†–û–ô–î–ï–ù–û")
            return True
        else:
            logger.error(f"‚ùå –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            return False
            
    def test_cross_user_access(self):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º"""
        logger.info("üîí –¢–ï–°–¢ 3: –ü–æ–ø—ã—Ç–∫–∏ –º–µ–∂–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
        
        violations = 0
        
        # –ë–µ—Ä–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user1_id = self.test_users[0]
        user1_accounts = get_user_instagram_accounts(user1_id)
        
        if not user1_accounts:
            logger.warning("‚ö†Ô∏è –£ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
            return True
            
        account_to_test = user1_accounts[0]
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in self.test_users[1:]:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç
                stolen_account = get_user_instagram_account(user_id, account_to_test.id)
                
                if stolen_account is not None:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account_to_test.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user1_id}")
                    violations += 1
                else:
                    logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ù–ï –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É")
                    
            except Exception as e:
                logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É: {e}")
                
        if violations == 0:
            logger.info("‚úÖ –ú–µ–∂–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ—Å—Ç—É–ø: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù")
            return True
        else:
            logger.error(f"‚ùå –ú–µ–∂–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ—Å—Ç—É–ø: {violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            return False
            
    def test_data_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîí –¢–ï–°–¢ 4: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        
        violations = 0
        
        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id
            accounts_without_user = session.query(InstagramAccount).filter(
                InstagramAccount.user_id.is_(None)
            ).count()
            
            if accounts_without_user > 0:
                logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {accounts_without_user} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ user_id")
                violations += 1
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id
            tasks_without_user = session.query(PublishTask).filter(
                PublishTask.user_id.is_(None)
            ).count()
            
            if tasks_without_user > 0:
                logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {tasks_without_user} –∑–∞–¥–∞—á –±–µ–∑ user_id")
                violations += 1
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∑–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            mismatched_tasks = session.query(PublishTask).join(InstagramAccount).filter(
                PublishTask.user_id != InstagramAccount.user_id
            ).count()
            
            if mismatched_tasks > 0:
                logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {mismatched_tasks} –∑–∞–¥–∞—á —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ user_id")
                violations += 1
                
        if violations == 0:
            logger.info("‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –ü–†–û–ô–î–ï–ù–û")
            return True
        else:
            logger.error(f"‚ùå –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            return False
            
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—â–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        deleted = {'users': 0, 'accounts': 0, 'tasks': 0}
        
        try:
            with get_session() as session:
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏
                if self.created_data['tasks']:
                    deleted_tasks = session.query(PublishTask).filter(
                        PublishTask.id.in_(self.created_data['tasks'])
                    ).delete(synchronize_session=False)
                    deleted['tasks'] = deleted_tasks
                    
                # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã  
                if self.created_data['accounts']:
                    deleted_accounts = session.query(InstagramAccount).filter(
                        InstagramAccount.id.in_(self.created_data['accounts'])
                    ).delete(synchronize_session=False)
                    deleted['accounts'] = deleted_accounts
                    
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if self.created_data['users']:
                    deleted_users = session.query(TelegramUser).filter(
                        TelegramUser.user_id.in_(self.created_data['users'])
                    ).delete(synchronize_session=False)
                    deleted['users'] = deleted_users
                    
                session.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted['users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {deleted['accounts']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {deleted['tasks']} –∑–∞–¥–∞—á")
        
    def run_final_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logger.info("üéØ" * 80)
        logger.info("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–ï–†–ï–î –ú–ò–ì–†–ê–¶–ò–ï–ô")
        logger.info("üéØ" * 80)
        
        results = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.create_test_users(5)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            results.append(('–ë–∞–∑–æ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è', self.test_basic_isolation()))
            results.append(('–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', self.test_concurrent_access()))
            results.append(('–ú–µ–∂–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ—Å—Ç—É–ø', self.test_cross_user_access()))
            results.append(('–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', self.test_data_consistency()))
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append(('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', False))
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            self.cleanup_test_data()
            
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        total_time = (datetime.now() - self.start_time).total_seconds()
        
        logger.info("=" * 80)
        logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò")
        logger.info("=" * 80)
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            logger.info(f"{test_name}: {status}")
            if result:
                passed += 1
                
        logger.info("-" * 80)
        
        if passed == total:
            logger.info("üèÜ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            logger.info("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ú–ò–ì–†–ê–¶–ò–ò –ù–ê PostgreSQL!")
            logger.info("üéâ –ò–ó–û–õ–Ø–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        else:
            logger.error("üí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ó–û–õ–Ø–¶–ò–ï–ô!")
            logger.error("üõë –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø!")
            
        logger.info(f"üìä –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        logger.info("=" * 80)
        
        return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–∑–æ–ª—è—Ü–∏–∏...")
    
    test = FinalIsolationTest()
    success = test.run_final_test()
    
    if success:
        logger.info("üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        logger.info("üöÄ –ì–û–¢–û–í–´ –ö –ú–ò–ì–†–ê–¶–ò–ò!")
        exit(0)
    else:
        logger.error("üí• –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        exit(1)

if __name__ == "__main__":
    main() 