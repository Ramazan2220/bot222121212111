#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏ –∑–∞ 2-3 –º–∏–Ω—É—Ç—ã
"""

import logging
import random
import time
import threading
from typing import List, Dict, Any
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from database.db_manager import get_session
from database.models import InstagramAccount, PublishTask, TaskType
from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
from database.user_management import get_active_users, get_user_info
from utils.user_cache import get_user_cache
from utils.processing_state import ProcessingState
from utils.smart_validator_service import SmartValidatorService
from utils.account_validator_service import AccountValidatorService

class QuickIsolationTest:
    """–ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏"""
    
    def __init__(self):
        self.users = []
        self.test_results = {}
        self.violations = []
        self.start_time = datetime.now()
        
    def create_test_users(self, count: int = 10):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        logger.info(f"üë• –°–æ–∑–¥–∞—é {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        user_names = ["Alex", "Beth", "Carl", "Dana", "Eric", "Faye", "Greg", "Hope", "Ivan", "Jane"]
        
        total_accounts = 0
        
        for i in range(count):
            user_id = 3000000 + i  # –ù–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
            name = user_names[i % len(user_names)] + f"_final_{i+1}"
            accounts_count = random.randint(2, 6)
            
            logger.info(f"üë§ –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} —Å {accounts_count} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
            
            user_accounts = []
            
            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with get_session() as session:
                for j in range(accounts_count):
                    username = f"{name.lower()}_acc_{j+1}_{random.randint(1000, 9999)}"
                    
                    account = InstagramAccount(
                        user_id=user_id,
                        username=username,
                        password=f"pass_{user_id}_{j+1}",
                        email=f"{username}@test.com",
                        status='active',
                        is_active=True,
                        full_name=f"{name} Account {j+1}",
                        biography=f"Test account for {name}"
                    )
                    
                    session.add(account)
                    session.commit()
                    
                    user_accounts.append(account.id)
                    total_accounts += 1
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    task = PublishTask(
                        user_id=user_id,
                        account_id=account.id,
                        task_type=TaskType.PHOTO,
                        caption=f"Test post from {name}",
                        scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 24))
                    )
                    session.add(task)
                    session.commit()
                    
            self.users.append({
                'user_id': user_id,
                'name': name,
                'accounts': user_accounts,
                'accounts_count': len(user_accounts)
            })
            
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        
    def test_basic_isolation(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–∑–æ–ª—è—Ü–∏–∏"""
        logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑–æ–≤—É—é –∏–∑–æ–ª—è—Ü–∏—é...")
        
        violations = []
        
        for user in self.users:
            user_id = user['user_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_accounts = get_user_instagram_accounts(user_id=user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            expected = user['accounts_count']
            actual = len(user_accounts)
            
            if actual != expected:
                violations.append({
                    'type': 'account_count_mismatch',
                    'user_id': user_id,
                    'expected': expected,
                    'actual': actual
                })
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
            for account in user_accounts:
                if account.user_id != user_id:
                    violations.append({
                        'type': 'wrong_user_id',
                        'user_id': user_id,
                        'account_id': account.id,
                        'account_user_id': account.user_id
                    })
                    
        self.test_results['basic_isolation'] = {
            'tested_users': len(self.users),
            'violations': violations,
            'success': len(violations) == 0
        }
        
        logger.info(f"üìä –ë–∞–∑–æ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è: {len(violations)} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏–∑ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    def test_cross_access_prevention(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        logger.info("üö´ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞—â–∏—Ç—É –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...")
        
        violations = []
        attempts = 0
        
        for i, user1 in enumerate(self.users):
            for j, user2 in enumerate(self.users):
                if i != j and user2['accounts']:  # –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    attempts += 1
                    
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç
                        foreign_account = get_user_instagram_account(
                            account_id=user2['accounts'][0],
                            user_id=user1['user_id']
                        )
                        
                        if foreign_account:
                            violations.append({
                                'type': 'unauthorized_access',
                                'requesting_user': user1['user_id'],
                                'accessed_account': user2['accounts'][0],
                                'owner_user': user2['user_id']
                            })
                            
                    except Exception:
                        # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        pass
                        
        self.test_results['cross_access'] = {
            'attempts': attempts,
            'violations': violations,
            'success': len(violations) == 0
        }
        
        logger.info(f"üìä –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø: {len(violations)} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏–∑ {attempts} –ø–æ–ø—ã—Ç–æ–∫")
        
    def test_concurrent_access(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        logger.info("‚ö° –¢–µ—Å—Ç–∏—Ä—É—é –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø...")
        
        results = []
        errors = []
        
        def user_activity(user):
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for _ in range(10):  # 10 –æ–ø–µ—Ä–∞—Ü–∏–π
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
                    accounts = get_user_instagram_accounts(user_id=user['user_id'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    if accounts:
                        account = get_user_instagram_account(
                            account_id=accounts[0].id,
                            user_id=user['user_id']
                        )
                        if account and account.user_id == user['user_id']:
                            results.append({
                                'user_id': user['user_id'],
                                'operation': 'success',
                                'accounts_found': len(accounts)
                            })
                        else:
                            errors.append({
                                'user_id': user['user_id'],
                                'error': 'isolation_violation'
                            })
                    
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                    
            except Exception as e:
                errors.append({
                    'user_id': user['user_id'],
                    'error': str(e)
                })
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        with ThreadPoolExecutor(max_workers=len(self.users)) as executor:
            futures = [executor.submit(user_activity, user) for user in self.users]
            
            for future in futures:
                future.result(timeout=30)
                
        self.test_results['concurrent_access'] = {
            'successful_operations': len(results),
            'errors': len(errors),
            'error_details': errors,
            'success': len(errors) == 0
        }
        
        logger.info(f"üìä –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {len(results)} —É—Å–ø–µ—Ö–æ–≤, {len(errors)} –æ—à–∏–±–æ–∫")
        
    def test_system_services_isolation(self):
        """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é –∏–∑–æ–ª—è—Ü–∏—é —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        cache = get_user_cache()
        cache.force_refresh()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = cache.get_active_users_safe()
        our_users = [u['user_id'] for u in self.users]
        found_users = [uid for uid in our_users if uid in active_users]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ ProcessingState
        processing_state = ProcessingState("final_test")
        processing_state.start_cycle(found_users)
        
        processed_successfully = 0
        for user_id in found_users:
            try:
                processing_state.start_user_processing(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                accounts = get_user_instagram_accounts(user_id=user_id)
                user_info = get_user_info(user_id)
                
                processing_state.complete_user_processing(user_id, True)
                processed_successfully += 1
                
            except Exception as e:
                processing_state.complete_user_processing(user_id, False, str(e))
                
        processing_state.complete_cycle()
        
        self.test_results['system_services'] = {
            'total_test_users': len(our_users),
            'found_in_system': len(found_users),
            'processed_successfully': processed_successfully,
            'success': processed_successfully == len(found_users)
        }
        
        logger.info(f"üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {processed_successfully}/{len(found_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
    def test_validator_services(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–µ—Ä–≤–∏—Å—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
            smart_validator = SmartValidatorService()
            account_validator = AccountValidatorService()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–µ
            validator_creation = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤: {e}")
            validator_creation = False
            
        self.test_results['validator_services'] = {
            'smart_validator_created': validator_creation,
            'account_validator_created': validator_creation,
            'success': validator_creation
        }
        
        logger.info(f"üìä –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {'‚úÖ –°–æ–∑–¥–∞–Ω—ã' if validator_creation else '‚ùå –û—à–∏–±–∫–∞'}")
        
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—â–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        deleted_accounts = 0
        deleted_tasks = 0
        
        try:
            with get_session() as session:
                for user in self.users:
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    tasks_deleted = session.query(PublishTask).filter_by(user_id=user['user_id']).delete()
                    deleted_tasks += tasks_deleted
                    
                    # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for account_id in user['accounts']:
                        deleted = session.query(InstagramAccount).filter_by(id=account_id).delete()
                        deleted_accounts += deleted
                        
                session.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {deleted_tasks} –∑–∞–¥–∞—á")
        
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("=" * 80)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò")
        logger.info("=" * 80)
        
        total_time = (datetime.now() - self.start_time).total_seconds()
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üë• –¢–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
        tests = [
            ('üîí –ë–∞–∑–æ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è', 'basic_isolation'),
            ('üö´ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞', 'cross_access'),
            ('‚ö° –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', 'concurrent_access'),
            ('üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã', 'system_services'),
            ('üîç –°–µ—Ä–≤–∏—Å—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 'validator_services')
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_key in tests:
            if test_key in self.test_results:
                result = self.test_results[test_key]
                success = result.get('success', False)
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
                
                logger.info(f"{test_name}: {status}")
                
                if success:
                    passed_tests += 1
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
                    if 'violations' in result and result['violations']:
                        logger.warning(f"   –ù–∞—Ä—É—à–µ–Ω–∏–π: {len(result['violations'])}")
                    if 'errors' in result and result['errors']:
                        logger.warning(f"   –û—à–∏–±–æ–∫: {result['errors']}")
                        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        logger.info("=" * 80)
        
        success_rate = passed_tests / total_tests
        
        if success_rate == 1.0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ò–ó–û–õ–Ø–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            logger.info("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ù!")
        elif success_rate >= 0.8:
            logger.warning("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û, –ù–û –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
            logger.warning("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –ü–ï–†–ï–î –ü–†–û–î–ê–ö–®–ù")
        else:
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ò–ó–û–õ–Ø–¶–ò–ï–ô!")
            logger.error("üõë –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ù!")
            
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1%})")
        logger.info("=" * 80)
        
        return success_rate
        
    def run_final_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        logger.info("=" * 80)
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.create_test_users(10)
            
            # 2. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
            self.test_basic_isolation()
            
            # 3. –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            self.test_cross_access_prevention()
            
            # 4. –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            self.test_concurrent_access()
            
            # 5. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            self.test_system_services_isolation()
            
            # 6. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
            self.test_validator_services()
            
            # 7. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            success_rate = self.analyze_results()
            
            return success_rate
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_test_data()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test = QuickIsolationTest()
    success_rate = test.run_final_test()
    
    if success_rate == 1.0:
        exit(0)  # –£—Å–ø–µ—Ö
    else:
        exit(1)  # –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã

if __name__ == "__main__":
    main() 