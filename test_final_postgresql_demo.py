#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üêò –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ù–ê PostgreSQL
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–π –ë–î
"""

import logging
import sys
import time
import threading
import random
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from database.db_manager import get_session, init_db
    from database.models import InstagramAccount, PublishTask, WarmupTask, TelegramUser, TaskType, TaskStatus, WarmupStatus
    from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
    from utils.user_cache import UserCache
    from database.user_management import get_active_users, get_users_by_priority
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

class PostgreSQLIsolationDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞ PostgreSQL"""
    
    def __init__(self):
        self.test_users = []
        self.performance_stats = {
            'queries_executed': 0,
            'concurrent_operations': 0,
            'isolation_violations': 0,
            'start_time': None,
            'postgresql_version': None
        }
        
    def create_demo_users(self) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üë• –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        demo_users = []
        
        try:
            with get_session() as session:
                for i in range(5):  # 5 –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    user_id = 9000000 + i
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    telegram_user = TelegramUser(
                        telegram_id=user_id,
                        username=f"demo_user_{i}",
                        first_name=f"Demo {i}",
                        last_name="PostgreSQL",
                        is_active=True
                    )
                    
                    session.merge(telegram_user)
                    session.flush()
                    
                    # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    accounts = []
                    for j in range(3):  # –ü–æ 3 –∞–∫–∫–∞—É–Ω—Ç–∞
                        account = InstagramAccount(
                            username=f"pg_demo_{i}_{j}",
                            password=f"demo_pass_{i}_{j}",
                            email=f"pg_demo_{i}_{j}@postgresql.test",
                            user_id=user_id,
                            is_active=True,
                            full_name=f"PostgreSQL Demo Account {i}-{j}",
                            biography=f"Demo account for PostgreSQL testing"
                        )
                        session.add(account)
                        accounts.append(account)
                    
                    session.flush()
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
                    tasks = []
                    for account in accounts:
                        # Publish task
                        publish_task = PublishTask(
                            account_id=account.id,
                            user_id=user_id,
                            task_type=TaskType.PHOTO,
                            caption=f"PostgreSQL demo post from user {i}",
                            scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 24)),
                            status=TaskStatus.PENDING
                        )
                        session.add(publish_task)
                        tasks.append(('publish', publish_task))
                        
                        # Warmup task
                        warmup_task = WarmupTask(
                            account_id=account.id,
                            status=WarmupStatus.PENDING,
                            settings={
                                'task_type': 'like',
                                'target_count': random.randint(10, 50),
                                'user_id': user_id,
                                'postgresql_demo': True
                            }
                        )
                        session.add(warmup_task)
                        tasks.append(('warmup', warmup_task))
                    
                    demo_users.append({
                        'user_id': user_id,
                        'username': f"demo_user_{i}",
                        'accounts': [acc.id for acc in accounts],
                        'tasks': len(tasks)
                    })
                    
                session.commit()
                
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(demo_users)} –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏")
            return demo_users
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
            
    def test_concurrent_isolation(self, users: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏"""
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏...")
        
        results = {
            'isolation_violations': 0,
            'successful_operations': 0,
            'cross_contamination': 0,
            'concurrent_queries': 0
        }
        
        def test_user_isolation(user_data: Dict[str, Any]):
            """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            user_id = user_data['user_id']
            
            try:
                with get_session() as session:
                    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
                    user_accounts = get_user_instagram_accounts(user_id)
                    expected_count = len(user_data['accounts'])
                    
                    if len(user_accounts) != expected_count:
                        results['isolation_violations'] += 1
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ–∂–∏–¥–∞–ª {expected_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–ª—É—á–∏–ª {len(user_accounts)}")
                    
                    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
                    for account in user_accounts:
                        if account.user_id != user_id:
                            results['cross_contamination'] += 1
                            logger.error(f"‚ùå –ò–ó–û–õ–Ø–¶–ò–Ø –ù–ê–†–£–®–ï–ù–ê! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∏–¥–∏—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {account.user_id}")
                    
                    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏
                    publish_tasks = session.query(PublishTask).filter_by(user_id=user_id).all()
                    warmup_tasks = session.query(WarmupTask).filter(
                        WarmupTask.account_id.in_(user_data['accounts'])
                    ).all()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    for task in publish_tasks:
                        if task.user_id != user_id:
                            results['cross_contamination'] += 1
                    
                    for task in warmup_tasks:
                        if task.settings.get('user_id') != user_id:
                            results['cross_contamination'] += 1
                    
                    results['successful_operations'] += 1
                    results['concurrent_queries'] += 4  # 4 –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                results['isolation_violations'] += 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(test_user_isolation, user) for user in users]
            
            for future in futures:
                future.result()
        
        return results
        
    def test_postgresql_features(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π PostgreSQL"""
        logger.info("üêò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π PostgreSQL...")
        
        features = {
            'version': None,
            'concurrent_connections': 0,
            'connection_pooling': False,
            'json_support': False,
            'foreign_key_constraints': False
        }
        
        try:
            with get_session() as session:
                                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
                from sqlalchemy import text
                result = session.execute(text("SELECT version()"))
                version = result.fetchone()[0]
                features['version'] = version
                logger.info(f"üêò PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
                
                                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É JSON
                try:
                    session.execute(text("SELECT '{\"test\": true}'::json"))
                    features['json_support'] = True
                    logger.info("‚úÖ JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –†–∞–±–æ—Ç–∞–µ—Ç")
                except:
                    logger.warning("‚ö†Ô∏è JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Foreign Key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º account_id
                    fake_task = PublishTask(
                        account_id=999999,
                        user_id=999999,
                        task_type=TaskType.PHOTO,
                        caption="Test FK constraint"
                    )
                    session.add(fake_task)
                    session.flush()
                    features['foreign_key_constraints'] = False
                except Exception:
                    features['foreign_key_constraints'] = True
                    logger.info("‚úÖ Foreign Key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –†–∞–±–æ—Ç–∞—é—Ç")
                    session.rollback()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL: {e}")
            
        return features
        
    def performance_benchmark(self, users: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("‚ö° –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        start_time = time.time()
        
        def benchmark_worker():
            """–í–æ—Ä–∫–µ—Ä –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞"""
            try:
                with get_session() as session:
                    # –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    user_id = random.choice(users)['user_id']
                    
                    # –ó–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    accounts = get_user_instagram_accounts(user_id)
                    
                    # –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á
                    tasks = session.query(PublishTask).filter_by(user_id=user_id).limit(10).all()
                    
                    self.performance_stats['queries_executed'] += 2
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–µ–Ω—á–º–∞—Ä–∫–µ: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 100 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        with ThreadPoolExecutor(max_workers=20) as executor:
            futures = [executor.submit(benchmark_worker) for _ in range(100)]
            
            for future in futures:
                future.result()
        
        end_time = time.time()
        
        return {
            'duration': end_time - start_time,
            'queries_per_second': self.performance_stats['queries_executed'] / (end_time - start_time),
            'total_queries': self.performance_stats['queries_executed']
        }
        
    def cleanup_demo_data(self, users: List[Dict[str, Any]]):
        """–û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            with get_session() as session:
                for user_data in users:
                    user_id = user_data['user_id']
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏
                    session.query(PublishTask).filter_by(user_id=user_id).delete()
                    
                    # –£–¥–∞–ª—è–µ–º warmup –∑–∞–¥–∞—á–∏
                    if user_data['accounts']:
                        session.query(WarmupTask).filter(
                            WarmupTask.account_id.in_(user_data['accounts'])
                        ).delete()
                    
                    # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
                    session.query(InstagramAccount).filter_by(user_id=user_id).delete()
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    session.query(TelegramUser).filter_by(telegram_id=user_id).delete()
                
                session.commit()
                logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
    def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ" * 80)
        logger.info("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ó–û–õ–Ø–¶–ò–ò –ù–ê PostgreSQL")
        logger.info("üöÄ" * 80)
        
        self.performance_stats['start_time'] = datetime.now()
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
            init_db()
            
            # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π PostgreSQL
            pg_features = self.test_postgresql_features()
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
            demo_users = self.create_demo_users()
            if not demo_users:
                logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return False
            
            # 4. –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏
            isolation_results = self.test_concurrent_isolation(demo_users)
            
            # 5. –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_results = self.performance_benchmark(demo_users)
            
            # 6. –ò—Ç–æ–≥–∏
            self.print_final_results(pg_features, isolation_results, perf_results)
            
            # 7. –û—á–∏—Å—Ç–∫–∞
            self.cleanup_demo_data(demo_users)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            if isolation_results['isolation_violations'] == 0 and isolation_results['cross_contamination'] == 0:
                logger.info("üèÜ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                return True
            else:
                logger.error("üí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ó–û–õ–Ø–¶–ò–ï–ô!")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
            
    def print_final_results(self, pg_features, isolation_results, perf_results):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        end_time = datetime.now()
        duration = (end_time - self.performance_stats['start_time']).total_seconds()
        
        logger.info("=" * 80)
        logger.info("üêò –ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò PostgreSQL")
        logger.info("=" * 80)
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üêò PostgreSQL –≤–µ—Ä—Å–∏—è: {pg_features.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:50]}...")
        
        logger.info("\nüìä –ò–ó–û–õ–Ø–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {isolation_results['successful_operations']}")
        logger.info(f"   ‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–π –∏–∑–æ–ª—è—Ü–∏–∏: {isolation_results['isolation_violations']}")
        logger.info(f"   üö´ –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö: {isolation_results['cross_contamination']}")
        logger.info(f"   üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {isolation_results['concurrent_queries']}")
        
        logger.info("\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        logger.info(f"   üèÉ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {perf_results['queries_per_second']:.2f}")
        logger.info(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {perf_results['total_queries']}")
        logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è –±–µ–Ω—á–º–∞—Ä–∫–∞: {perf_results['duration']:.2f} —Å–µ–∫")
        
        logger.info("\nüîß –í–û–ó–ú–û–ñ–ù–û–°–¢–ò PostgreSQL:")
        logger.info(f"   üìÑ JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úÖ' if pg_features['json_support'] else '‚ùå'}")
        logger.info(f"   üîó Foreign Key: {'‚úÖ' if pg_features['foreign_key_constraints'] else '‚ùå'}")
        
        if isolation_results['isolation_violations'] == 0 and isolation_results['cross_contamination'] == 0:
            logger.info("\nüéâ –ò–ó–û–õ–Ø–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –Ω–∞ PostgreSQL!")
        else:
            logger.info("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            logger.info("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            
        logger.info("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = PostgreSQLIsolationDemo()
    success = demo.run_full_demo()
    
    if success:
        print("\nüéâ –ì–û–¢–û–í–û! PostgreSQL –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        exit(0)
    else:
        print("\nüí• –û–®–ò–ë–ö–ê! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏!")
        exit(1)

if __name__ == "__main__":
    main() 