#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîß –¢–ï–°–¢ –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Ä–∞–±–æ—Ç—É –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import logging
import threading
import time
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from database.db_manager import init_db, get_session
from database.connection_pool import get_db_stats, db_health_check
from database.models import InstagramAccount

class PoolConnectionTest:
    """–¢–µ—Å—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.created_accounts = []
        
    def test_pool_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞"""
        logger.info("üîß –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞
        stats = get_db_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = db_health_check()
        logger.info(f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –ø—É–ª–∞: {'‚úÖ OK' if health else '‚ùå FAILED'}")
        
        return health
        
    def test_concurrent_sessions(self, num_threads: int = 20):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        logger.info(f"üîß –¢–ï–°–¢ 2: {num_threads} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        
        successes = 0
        errors = 0
        
        def session_worker(worker_id):
            nonlocal successes, errors
            try:
                with get_session() as session:
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    account = InstagramAccount(
                        user_id=1000000 + worker_id,
                        username=f"pool_test_{worker_id}_{int(time.time())}",
                        password=f"test_pass_{worker_id}",
                        email=f"pool_test_{worker_id}@test.com",
                        full_name=f"Pool Test {worker_id}",
                        biography="Pool connection test account"
                    )
                    session.add(account)
                    session.commit()
                    session.refresh(account)
                    
                    self.created_accounts.append(account.id)
                    successes += 1
                    logger.info(f"‚úÖ –í–æ—Ä–∫–µ—Ä {worker_id}: –∞–∫–∫–∞—É–Ω—Ç {account.id} —Å–æ–∑–¥–∞–Ω")
                    
            except Exception as e:
                errors += 1
                logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä {worker_id}: –æ—à–∏–±–∫–∞ - {e}")
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        with ThreadPoolExecutor(max_workers=num_threads) as executor:
            futures = [executor.submit(session_worker, i) for i in range(num_threads)]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for future in futures:
                future.result()
                
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successes} —É—Å–ø–µ—Ö–æ–≤, {errors} –æ—à–∏–±–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞
        stats = get_db_stats()
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        return errors == 0
        
    def test_extreme_load(self, num_threads: int = 100):
        """–¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
        logger.info(f"üîß –¢–ï–°–¢ 3: {num_threads} –ø–æ—Ç–æ–∫–æ–≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        
        operations = 0
        errors = 0
        
        def extreme_worker(worker_id):
            nonlocal operations, errors
            
            for i in range(10):  # 10 –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –≤–æ—Ä–∫–µ—Ä
                try:
                    with get_session() as session:
                        # –ü—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è
                        result = session.query(InstagramAccount).filter_by(user_id=1000000 + worker_id).first()
                        operations += 1
                        
                        if i % 5 == 0:
                            logger.info(f"‚ö° –í–æ—Ä–∫–µ—Ä {worker_id}: –æ–ø–µ—Ä–∞—Ü–∏—è {i+1}/10")
                            
                except Exception as e:
                    errors += 1
                    logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä {worker_id}, –æ–ø–µ—Ä–∞—Ü–∏—è {i}: {e}")
                    
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=num_threads) as executor:
            futures = [executor.submit(extreme_worker, i) for i in range(num_threads)]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for future in futures:
                future.result()
                
        end_time = time.time()
        
        logger.info(f"üìä –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {operations} –æ–ø–µ—Ä–∞—Ü–∏–π, {errors} –æ—à–∏–±–æ–∫ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_db_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: {stats}")
        
        return errors < operations * 0.05  # –î–æ–ø—É—Å–∫–∞–µ–º 5% –æ—à–∏–±–æ–∫ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—â–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        deleted = 0
        
        try:
            with get_session() as session:
                # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                if self.created_accounts:
                    deleted = session.query(InstagramAccount).filter(
                        InstagramAccount.id.in_(self.created_accounts)
                    ).delete(synchronize_session=False)
                    session.commit()
                    
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
                test_deleted = session.query(InstagramAccount).filter(
                    InstagramAccount.username.like('pool_test_%')
                ).delete(synchronize_session=False)
                session.commit()
                
                deleted += test_deleted
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
    def run_pool_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—É–ª–∞"""
        logger.info("üîß" * 60)
        logger.info("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô –ë–î")
        logger.info("üîß" * 60)
        
        results = []
        
        try:
            # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            result1 = self.test_pool_initialization()
            results.append(('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞', result1))
            
            if not result1:
                logger.error("‚ùå –ü—É–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
                return False
                
            # –¢–µ—Å—Ç 2: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            result2 = self.test_concurrent_sessions(20)
            results.append(('20 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π', result2))
            
            # –¢–µ—Å—Ç 3: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—à–ª–∏)
            if result2:
                result3 = self.test_extreme_load(100)
                results.append(('–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (100 –ø–æ—Ç–æ–∫–æ–≤)', result3))
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–∞—Ö")
                results.append(('–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', False))
                
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append(('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', False))
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            self.cleanup_test_data()
            
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("=" * 80)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô")
        logger.info("=" * 80)
        
        total_time = (datetime.now() - self.start_time).total_seconds()
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            logger.info(f"{test_name}: {status}")
            if result:
                passed += 1
                
        logger.info("-" * 80)
        
        if passed == total:
            logger.info("üèÜ –í–°–ï –¢–ï–°–¢–´ –ü–£–õ–ê –ü–†–û–ô–î–ï–ù–´!")
            logger.info("üöÄ –ü–£–õ –°–û–ï–î–ò–ù–ï–ù–ò–ô –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        elif passed >= total * 0.75:
            logger.warning("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
            logger.warning("üîß –ï–°–¢–¨ –ù–ï–ë–û–õ–¨–®–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ü–£–õ–û–ú")
        else:
            logger.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ü–£–õ–û–ú!")
            logger.error("üõë –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!")
            
        logger.info(f"üìä –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        logger.info("=" * 80)
        
        return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
    
    test = PoolConnectionTest()
    success = test.run_pool_tests()
    
    if success:
        logger.info("üèÜ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–õ–ê –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        exit(0)
    else:
        logger.error("üí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–õ–ê –ù–ï –ü–†–û–ô–î–ï–ù–û!")
        exit(1)

if __name__ == "__main__":
    main() 