#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üí• –ö–†–ê–®-–¢–ï–°–¢ PostgreSQL vs SQLite
–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–µ –∂–µ —É—Å–ª–æ–≤–∏—è —á—Ç–æ –ª–æ–º–∞–ª–∏ SQLite
"""

import logging
import sys
import time
import threading
import random
import multiprocessing
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from database.db_manager import get_session, init_db
    from database.models import InstagramAccount, PublishTask, WarmupTask, TelegramUser, TaskType, TaskStatus, WarmupStatus
    from sqlalchemy import text
    import psutil
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class PostgreSQLCrashTest:
    """–ö—Ä–∞—à-—Ç–µ—Å—Ç PostgreSQL"""
    
    def __init__(self):
        self.crash_stats = {
            'segmentation_faults': 0,
            'interface_errors': 0,
            'system_errors': 0,
            'connection_errors': 0,
            'successful_operations': 0,
            'failed_operations': 0,
            'start_time': None,
            'threads_spawned': 0,
            'max_concurrent_threads': 0
        }
        
    def create_extreme_user_batch(self, user_base_id: int, batch_size: int = 100) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –±–∞—Ç—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–µ –∂–µ —É—Å–ª–æ–≤–∏—è —á—Ç–æ –ª–æ–º–∞–ª–∏ SQLite)"""
        
        batch_stats = {
            'users_created': 0,
            'accounts_created': 0,
            'tasks_created': 0,
            'errors': []
        }
        
        try:
            with get_session() as session:
                # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                for i in range(batch_size):
                    user_id = user_base_id + i
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ SQLite —Ç–µ—Å—Ç–µ)
                        telegram_user = TelegramUser(
                            telegram_id=user_id,
                            username=f"crash_test_{user_id}",
                            first_name=f"Crash {i}",
                            last_name="Test",
                            is_active=True
                        )
                        session.merge(telegram_user)
                        batch_stats['users_created'] += 1
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ)
                        for j in range(5):
                            account = InstagramAccount(
                                username=f"crash_{user_id}_{j}_{random.randint(100000, 999999)}",
                                password=f"pass_{user_id}_{j}",
                                email=f"crash_{user_id}_{j}@crash.test",
                                user_id=user_id,
                                is_active=True,
                                full_name=f"Crash Account {user_id}-{j}",
                                biography=f"Crash test account for user {user_id}"
                            )
                            session.add(account)
                            batch_stats['accounts_created'] += 1
                            
                        session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ (—Ç–µ –∂–µ —á—Ç–æ –ª–æ–º–∞–ª–∏ SQLite)
                        user_accounts = session.query(InstagramAccount).filter_by(user_id=user_id).all()
                        
                        for account in user_accounts:
                            # PublishTask (–≤—ã–∑—ã–≤–∞–ª–∞ InterfaceError –≤ SQLite)
                            publish_task = PublishTask(
                                account_id=account.id,
                                user_id=user_id,
                                task_type=TaskType.VIDEO,  # VIDEO –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                                caption=f"Crash test video from user {user_id}",
                                scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 48)),
                                status=TaskStatus.PENDING
                            )
                            session.add(publish_task)
                            batch_stats['tasks_created'] += 1
                            
                            # WarmupTask (–≤—ã–∑—ã–≤–∞–ª–∞ SystemError –≤ SQLite)
                            warmup_task = WarmupTask(
                                account_id=account.id,
                                status=WarmupStatus.PENDING,
                                settings={
                                    'task_type': 'like',
                                    'target_count': random.randint(10, 200),
                                    'user_id': user_id,
                                    'crash_test': True
                                }
                            )
                            session.add(warmup_task)
                            batch_stats['tasks_created'] += 1
                            
                        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç: flush + commit (–≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª Segmentation fault)
                        session.flush()
                        session.commit()
                        
                        self.crash_stats['successful_operations'] += 1
                        
                    except Exception as e:
                        error_msg = str(e)
                        batch_stats['errors'].append(f"User {user_id}: {error_msg}")
                        
                        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–∫–∞–∫ –≤ SQLite)
                        if "InterfaceError" in error_msg:
                            self.crash_stats['interface_errors'] += 1
                        elif "SystemError" in error_msg:
                            self.crash_stats['system_errors'] += 1
                        elif "connection" in error_msg.lower():
                            self.crash_stats['connection_errors'] += 1
                        
                        self.crash_stats['failed_operations'] += 1
                        session.rollback()
                        continue
                        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞—Ç—á–∞: {e}")
            batch_stats['errors'].append(f"Batch error: {e}")
            
        return batch_stats
        
    def thread_worker(self, thread_id: int, user_base: int) -> Dict[str, Any]:
        """–í–æ—Ä–∫–µ—Ä –ø–æ—Ç–æ–∫–∞ (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —É—Å–ª–æ–≤–∏—è –∫—Ä–∞—Ö–∞ SQLite)"""
        
        thread_stats = {
            'thread_id': thread_id,
            'operations': 0,
            'errors': [],
            'start_time': time.time()
        }
        
        try:
            # –ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            batch_result = self.create_extreme_user_batch(user_base + (thread_id * 1000), 20)
            thread_stats['operations'] = batch_result['users_created']
            thread_stats['errors'] = batch_result['errors']
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ)
            with get_session() as session:
                for _ in range(10):
                    # –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ
                    try:
                        users = session.query(TelegramUser).limit(5).all()
                        accounts = session.query(InstagramAccount).limit(10).all()
                        tasks = session.query(PublishTask).limit(5).all()
                        
                        # JSON –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤ SQLite)
                        result = session.execute(text("SELECT '{\"test\": true}'::json"))
                        json_result = result.fetchone()[0]
                        
                        thread_stats['operations'] += 4
                        
                    except Exception as e:
                        thread_stats['errors'].append(f"Query error: {e}")
                        
        except Exception as e:
            thread_stats['errors'].append(f"Thread {thread_id} crashed: {e}")
            logger.error(f"üí• –ü–æ—Ç–æ–∫ {thread_id} —É–ø–∞–ª: {e}")
            
        thread_stats['duration'] = time.time() - thread_stats['start_time']
        return thread_stats
        
    def run_extreme_concurrent_test(self, num_threads: int = 100, users_per_thread: int = 20):
        """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (—Ç–µ –∂–µ —É—Å–ª–æ–≤–∏—è —á—Ç–æ —É–±–∏–≤–∞–ª–∏ SQLite)"""
        
        logger.info(f"üí• –ó–ê–ü–£–°–ö –ö–†–ê–®-–¢–ï–°–¢–ê: {num_threads} –ø–æ—Ç–æ–∫–æ–≤, {users_per_thread} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–æ—Ç–æ–∫")
        logger.info(f"üíÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ~{num_threads * users_per_thread * 10}")
        
        self.crash_stats['threads_spawned'] = num_threads
        self.crash_stats['start_time'] = time.time()
        
        thread_results = []
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ (–∑–¥–µ—Å—å SQLite –¥–∞–≤–∞–ª Segmentation fault)
        with ThreadPoolExecutor(max_workers=num_threads) as executor:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
            futures = []
            for i in range(num_threads):
                future = executor.submit(self.thread_worker, i, i * 10000)
                futures.append(future)
                
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            completed = 0
            for future in as_completed(futures):
                try:
                    result = future.result(timeout=30)  # SQLite –≤–∏—Å–µ–ª –∑–¥–µ—Å—å
                    thread_results.append(result)
                    completed += 1
                    
                    if completed % 10 == 0:
                        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {completed}/{num_threads}")
                        
                except Exception as e:
                    logger.error(f"üí• –ü–æ—Ç–æ–∫ —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
                    self.crash_stats['failed_operations'] += 1
                    
        return thread_results
        
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            with get_session() as session:
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                deleted_tasks = session.execute(text("DELETE FROM publish_tasks WHERE caption LIKE '%Crash test%'")).rowcount
                deleted_warmup = session.execute(text("DELETE FROM warmup_tasks WHERE settings::text LIKE '%crash_test%'")).rowcount
                deleted_accounts = session.execute(text("DELETE FROM instagram_accounts WHERE username LIKE 'crash_%'")).rowcount
                deleted_users = session.execute(text("DELETE FROM telegram_users WHERE username LIKE 'crash_test_%'")).rowcount
                
                session.commit()
                
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {deleted_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {deleted_tasks + deleted_warmup} –∑–∞–¥–∞—á")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
    def print_crash_test_results(self, thread_results: List[Dict], duration: float):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—Ä–∞—à-—Ç–µ—Å—Ç–∞"""
        
        total_operations = sum(r['operations'] for r in thread_results)
        total_errors = sum(len(r['errors']) for r in thread_results)
        successful_threads = len([r for r in thread_results if len(r['errors']) == 0])
        
        logger.info("=" * 80)
        logger.info("üí• –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ê–®-–¢–ï–°–¢–ê PostgreSQL vs SQLite")
        logger.info("=" * 80)
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üßµ –ü–æ—Ç–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {self.crash_stats['threads_spawned']}")
        logger.info(f"üßµ –ü–æ—Ç–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ: {successful_threads}")
        logger.info(f"üßµ –ü–æ—Ç–æ–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(thread_results) - successful_threads}")
        
        logger.info(f"\nüìä –û–ü–ï–†–ê–¶–ò–ò:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {total_errors}")
        logger.info(f"   ‚ö° –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {total_operations / duration:.2f}")
        
        logger.info(f"\nüí• –û–®–ò–ë–ö–ò SQLite (–∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –ù–ï–¢):")
        logger.info(f"   üíÄ Segmentation fault: {self.crash_stats['segmentation_faults']}")
        logger.info(f"   üîß InterfaceError: {self.crash_stats['interface_errors']}")
        logger.info(f"   ‚öôÔ∏è SystemError: {self.crash_stats['system_errors']}")
        logger.info(f"   üîå Connection errors: {self.crash_stats['connection_errors']}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å SQLite
        logger.info(f"\nüî• –°–†–ê–í–ù–ï–ù–ò–ï –° SQLite:")
        logger.info(f"   SQLite: üí• –ö–†–ê–• –Ω–∞ {self.crash_stats['threads_spawned']} –ø–æ—Ç–æ–∫–∞—Ö")
        logger.info(f"   PostgreSQL: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –Ω–∞ {self.crash_stats['threads_spawned']} –ø–æ—Ç–æ–∫–∞—Ö")
        logger.info(f"   SQLite: üí• Segmentation fault –ø—Ä–∏ flush/commit")
        logger.info(f"   PostgreSQL: ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ flush/commit –æ–ø–µ—Ä–∞—Ü–∏–∏")
        logger.info(f"   SQLite: üí• InterfaceError –ø—Ä–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏")
        logger.info(f"   PostgreSQL: ‚úÖ –ò–¥–µ–∞–ª—å–Ω–∞—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å")
        
        if total_errors == 0 and self.crash_stats['segmentation_faults'] == 0:
            logger.info(f"\nüèÜ –ö–†–ê–®-–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            logger.info(f"üöÄ PostgreSQL —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è —É–±–∏–≤–∞–ª–∞ SQLite!")
            return True
        else:
            logger.info(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–µ")
            return False
            
    def run_full_crash_test(self):
        """–ü–æ–ª–Ω—ã–π –∫—Ä–∞—à-—Ç–µ—Å—Ç"""
        logger.info("üí•" * 80)
        logger.info("üí• –ö–†–ê–®-–¢–ï–°–¢ PostgreSQL: –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —É—Å–ª–æ–≤–∏—è —á—Ç–æ –ª–æ–º–∞–ª–∏ SQLite")
        logger.info("üí•" * 80)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üíª CPU —è–¥–µ—Ä: {multiprocessing.cpu_count()}")
        logger.info(f"üíæ RAM: {psutil.virtual_memory().total / 1024 / 1024 / 1024:.1f} GB")
        logger.info(f"üêò –¢–µ—Å—Ç–∏—Ä—É–µ–º PostgreSQL –≤–º–µ—Å—Ç–æ SQLite")
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø—É–ª–æ–º...")
            init_db()
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
            with get_session() as session:
                result = session.execute(text("SELECT version()"))
                version = result.fetchone()[0]
                logger.info(f"üêò PostgreSQL: {version[:50]}...")
                
            # 3. –ö—Ä–∞—à-—Ç–µ—Å—Ç (—Ç–µ –∂–µ —É—Å–ª–æ–≤–∏—è —á—Ç–æ —É–±–∏–≤–∞–ª–∏ SQLite)
            start_time = time.time()
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: 100 –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            # (–∑–¥–µ—Å—å SQLite –¥–∞–≤–∞–ª Segmentation fault: 11)
            thread_results = self.run_extreme_concurrent_test(
                num_threads=100,  # –£–±–∏–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è SQLite
                users_per_thread=20  # –ú–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            # 4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success = self.print_crash_test_results(thread_results, duration)
            
            # 5. –û—á–∏—Å—Ç–∫–∞
            self.cleanup_test_data()
            
            return success
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–†–ê–®-–¢–ï–°–¢–ê: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∞—à-—Ç–µ—Å—Ç–∞"""
    
    crash_test = PostgreSQLCrashTest()
    success = crash_test.run_full_crash_test()
    
    if success:
        print("\nüéâ –ö–†–ê–®-–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print("üöÄ PostgreSQL –≤—ã–¥–µ—Ä–∂–∞–ª –Ω–∞–≥—Ä—É–∑–∫—É, –∫–æ—Ç–æ—Ä–∞—è —É–±–∏–≤–∞–ª–∞ SQLite!")
        print("üí™ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –Ω–∞–≥—Ä—É–∑–∫–∞–º!")
        exit(0)
    else:
        print("\nüí• –ö–†–ê–®-–¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        exit(1)

if __name__ == "__main__":
    main() 