#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üêò –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö PostgreSQL
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL
"""

import logging
import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
from database.models import Base, InstagramAccount, PublishTask, TaskType
from database.connection_pool import init_db_pool, get_db_stats, db_health_check

class PostgreSQLReadinessTest:
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ PostgreSQL"""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = datetime.now()
        
    def test_1_postgresql_driver(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –¥—Ä–∞–π–≤–µ—Ä–∞"""
        logger.info("üêò –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –¥—Ä–∞–π–≤–µ—Ä–∞")
        
        try:
            import psycopg2
            version = psycopg2.__version__
            logger.info(f"‚úÖ psycopg2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –≤–µ—Ä—Å–∏—è {version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è PostgreSQL URL
            test_url = "postgresql://user:password@localhost:5432/testdb"
            engine = create_engine(test_url, strategy='mock', executor=lambda sql, *_: None)
            logger.info("‚úÖ SQLAlchemy –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å PostgreSQL engine")
            
            self.test_results['postgresql_driver'] = True
            return True
            
        except ImportError as e:
            logger.error(f"‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            self.test_results['postgresql_driver'] = False
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL: {e}")
            self.test_results['postgresql_driver'] = False
            return False
            
    def test_2_models_compatibility(self):
        """–¢–µ—Å—Ç 2: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π —Å PostgreSQL"""
        logger.info("üêò –¢–ï–°–¢ 2: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π —Å PostgreSQL")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock PostgreSQL engine
            test_url = "postgresql://user:password@localhost:5432/testdb"
            engine = create_engine(test_url, strategy='mock', executor=lambda sql, *_: None)
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã (DDL –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
            metadata_sql = []
            def mock_execute(sql, *args):
                metadata_sql.append(str(sql))
                
            engine = create_engine(test_url, strategy='mock', executor=mock_execute)
            Base.metadata.create_all(engine)
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(metadata_sql)} DDL –∫–æ–º–∞–Ω–¥ –¥–ª—è PostgreSQL")
            logger.info("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å PostgreSQL")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            key_tables = ['instagram_accounts', 'publish_tasks', 'warmup_tasks']
            found_tables = []
            
            for sql in metadata_sql:
                for table in key_tables:
                    if table in sql.lower():
                        found_tables.append(table)
                        
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {set(found_tables)}")
            
            self.test_results['models_compatibility'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            self.test_results['models_compatibility'] = False
            return False
            
    def test_3_connection_pool_postgresql(self):
        """–¢–µ—Å—Ç 3: Connection Pool —Å PostgreSQL"""
        logger.info("üêò –¢–ï–°–¢ 3: Connection Pool –¥–ª—è PostgreSQL")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—É–ª–∞ –¥–ª—è PostgreSQL
            test_url = "postgresql://user:password@localhost:5432/testdb"
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–ª–∞—Å—Å –ø—É–ª–∞
            from database.connection_pool import DatabaseConnectionPool
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
            pool = DatabaseConnectionPool(
                database_url=test_url,
                pool_size=50,
                max_overflow=100,
                pool_timeout=60,
                pool_recycle=3600
            )
            
            logger.info("‚úÖ PostgreSQL Connection Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: pool_size=50, max_overflow=100, timeout=60")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            stats = {
                'config': {
                    'pool_size': pool.pool_size,
                    'max_overflow': pool.max_overflow,
                    'pool_timeout': pool.pool_timeout,
                    'pool_recycle': pool.pool_recycle
                }
            }
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞: {stats['config']}")
            
            self.test_results['connection_pool'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Connection Pool: {e}")
            self.test_results['connection_pool'] = False
            return False
            
    def test_4_migration_script_readiness(self):
        """–¢–µ—Å—Ç 4: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üêò –¢–ï–°–¢ 4: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
            migration_script = "migrate_to_postgresql.py"
            
            if os.path.exists(migration_script):
                logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω: {migration_script}")
                
                # –ß–∏—Ç–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                with open(migration_script, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                key_functions = [
                    'create_postgres_database',
                    'migrate_data',
                    'POSTGRES_CONFIG'
                ]
                
                found_functions = []
                for func in key_functions:
                    if func in content:
                        found_functions.append(func)
                        
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {found_functions}")
                
                if len(found_functions) >= 2:
                    logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤")
                    self.test_results['migration_script'] = True
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã–π")
                    self.test_results['migration_script'] = False
                    return False
                    
            else:
                logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_script}")
                self.test_results['migration_script'] = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['migration_script'] = False
            return False
            
    def test_5_isolation_compatibility(self):
        """–¢–µ—Å—Ç 5: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑–æ–ª—è—Ü–∏–∏ —Å PostgreSQL"""
        logger.info("üêò –¢–ï–°–¢ 5: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å PostgreSQL
            from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
            from database.user_management import get_active_users, get_user_info
            
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç user_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
            if hasattr(InstagramAccount, 'user_id'):
                logger.info("‚úÖ InstagramAccount –∏–º–µ–µ—Ç –ø–æ–ª–µ user_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏")
            else:
                logger.error("‚ùå InstagramAccount –ù–ï –∏–º–µ–µ—Ç –ø–æ–ª–µ user_id")
                self.test_results['isolation_compatibility'] = False
                return False
                
            if hasattr(PublishTask, 'user_id'):
                logger.info("‚úÖ PublishTask –∏–º–µ–µ—Ç –ø–æ–ª–µ user_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏")
            else:
                logger.error("‚ùå PublishTask –ù–ï –∏–º–µ–µ—Ç –ø–æ–ª–µ user_id")
                self.test_results['isolation_compatibility'] = False
                return False
                
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å PostgreSQL")
            self.test_results['isolation_compatibility'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏: {e}")
            self.test_results['isolation_compatibility'] = False
            return False
            
    def analyze_readiness_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        logger.info("=" * 80)
        logger.info("üêò –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö PostgreSQL")
        logger.info("=" * 80)
        
        total_time = (datetime.now() - self.start_time).total_seconds()
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        passed_tests = 0
        total_tests = len(self.test_results)
        
        test_names = {
            'postgresql_driver': 'üêò PostgreSQL –¥—Ä–∞–π–≤–µ—Ä',
            'models_compatibility': 'üìä –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π',
            'connection_pool': 'üèä Connection Pool',
            'migration_script': 'üìã –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏',
            'isolation_compatibility': 'üîí –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑–æ–ª—è—Ü–∏–∏'
        }
        
        for test_key, result in self.test_results.items():
            test_name = test_names.get(test_key, test_key)
            status = "‚úÖ –ì–û–¢–û–í" if result else "‚ùå –ù–ï –ì–û–¢–û–í"
            logger.info(f"{test_name}: {status}")
            if result:
                passed_tests += 1
                
        logger.info("-" * 80)
        
        readiness_percentage = (passed_tests / total_tests) * 100
        
        if passed_tests == total_tests:
            logger.info("üèÜ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö PostgreSQL!")
            logger.info("üöÄ –ú–û–ñ–ù–û –ü–†–û–í–û–î–ò–¢–¨ –ú–ò–ì–†–ê–¶–ò–Æ –í –õ–Æ–ë–û–ô –ú–û–ú–ï–ù–¢!")
        elif passed_tests >= total_tests * 0.8:
            logger.info("‚ö° –°–ò–°–¢–ï–ú–ê –ü–û–ß–¢–ò –ì–û–¢–û–í–ê –ö PostgreSQL!")
            logger.info("üîß –ù–£–ñ–ù–´ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –î–û–†–ê–ë–û–¢–ö–ò!")
        else:
            logger.error("üõë –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö PostgreSQL!")
            logger.error("üîß –¢–†–ï–ë–£–Æ–¢–°–Ø –°–ï–†–¨–ï–ó–ù–´–ï –î–û–†–ê–ë–û–¢–ö–ò!")
            
        logger.info(f"üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {passed_tests}/{total_tests} ({readiness_percentage:.1f}%)")
        
        if passed_tests >= total_tests * 0.8:
            logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ PostgreSQL –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
        else:
            logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã!")
            
        logger.info("=" * 80)
        
        return passed_tests == total_tests
        
    def run_postgresql_readiness_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        logger.info("üêò" * 60)
        logger.info("üêò –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –ö PostgreSQL")
        logger.info("üêò –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ü–ï–†–ï–î –ú–ò–ì–†–ê–¶–ò–ï–ô")
        logger.info("üêò" * 60)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            self.test_1_postgresql_driver()
            self.test_2_models_compatibility()
            self.test_3_connection_pool_postgresql()
            self.test_4_migration_script_readiness()
            self.test_5_isolation_compatibility()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success = self.analyze_readiness_results()
            
            return success
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
    logger.info("üêò –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ PostgreSQL...")
    
    test = PostgreSQLReadinessTest()
    success = test.run_postgresql_readiness_test()
    
    if success:
        logger.info("üèÜ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PostgreSQL!")
        exit(0)
    else:
        logger.error("üí• –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö PostgreSQL!")
        exit(1)

if __name__ == "__main__":
    main() 