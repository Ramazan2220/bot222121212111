#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ì–ª—É–±–æ–∫–∏–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–ª–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
"""

import logging
import random
import time
import asyncio
import threading
import queue
import multiprocessing
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('test_production_simulation.log')
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from database.db_manager import get_session, add_instagram_account
from database.models import InstagramAccount, Proxy, PublishTask, WarmupTask, TaskType, WarmupStatus
from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
from database.user_management import get_active_users, get_user_info
from utils.user_cache import get_user_cache, process_users_with_limits
from utils.processing_state import ProcessingState, health_check_processing_states
from utils.health_monitor import get_health_monitor
from utils.smart_validator_service import SmartValidatorService
from utils.account_validator_service import AccountValidatorService
from utils.proxy_manager import distribute_proxies, get_proxies

class ProductionUser:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞–≥—Ä—É–∑–∫–∏"""
    
    def __init__(self, user_id: int, name: str, profile: str = "normal"):
        self.user_id = user_id
        self.name = name
        self.profile = profile  # normal, heavy, light, vip
        self.accounts = []
        self.tasks = []
        self.activity_log = []
        self.error_count = 0
        self.success_count = 0
        self.start_time = datetime.now()
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.profiles = {
            "light": {"accounts": (1, 3), "tasks_per_hour": (1, 5), "concurrent_ops": 1},
            "normal": {"accounts": (3, 8), "tasks_per_hour": (5, 15), "concurrent_ops": 2},
            "heavy": {"accounts": (8, 15), "tasks_per_hour": (15, 30), "concurrent_ops": 4},
            "vip": {"accounts": (10, 20), "tasks_per_hour": (20, 50), "concurrent_ops": 6}
        }
        
    def get_profile_settings(self):
        return self.profiles.get(self.profile, self.profiles["normal"])
        
    def create_realistic_accounts(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        settings = self.get_profile_settings()
        accounts_count = random.randint(*settings["accounts"])
        
        logger.info(f"üë§ {self.name} ({self.profile}): –°–æ–∑–¥–∞—é {accounts_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        domains = ["gmail.com", "yahoo.com", "outlook.com", "hotmail.com", "icloud.com"]
        statuses = ["active", "warming", "ready"]
        
        with get_session() as session:
            for i in range(accounts_count):
                username = f"{self.name.lower()}_{random.randint(1000, 9999)}"
                password = f"Pass_{self.user_id}_{random.randint(100, 999)}"
                email = f"{username}@{random.choice(domains)}"
                
                account = InstagramAccount(
                    user_id=self.user_id,
                    username=username,
                    password=password,
                    status=random.choice(statuses),
                    is_active=True,
                    email=email,
                    full_name=f"{self.name} Test Account {i+1}",
                    biography=f"Test account for user {self.name}"
                )
                
                session.add(account)
                session.commit()
                
                self.accounts.append(account.id)
                
        logger.info(f"üë§ {self.name}: –°–æ–∑–¥–∞–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
    def simulate_user_activity(self, duration_minutes: int = 5):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_profile_settings()
        end_time = datetime.now() + timedelta(minutes=duration_minutes)
        
        logger.info(f"üé¨ {self.name}: –ù–∞—á–∏–Ω–∞—é –∏–º–∏—Ç–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")
        
        while datetime.now() < end_time:
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                activity_type = random.choice([
                    "check_accounts", "create_task", "check_tasks", 
                    "update_account", "mass_operation"
                ])
                
                self.perform_activity(activity_type)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
                pause = random.uniform(1, 10)  # 1-10 —Å–µ–∫—É–Ω–¥
                time.sleep(pause)
                
            except Exception as e:
                self.error_count += 1
                self.activity_log.append({
                    "time": datetime.now().isoformat(),
                    "activity": "error",
                    "error": str(e)
                })
                logger.error(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                
        logger.info(f"üèÅ {self.name}: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö–æ–≤: {self.success_count}, –û—à–∏–±–æ–∫: {self.error_count}")
        
    def perform_activity(self, activity_type: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        start_time = time.time()
        
        try:
            if activity_type == "check_accounts":
                accounts = get_user_instagram_accounts(user_id=self.user_id)
                self.log_activity(activity_type, {"accounts_found": len(accounts)})
                
            elif activity_type == "create_task":
                if self.accounts:
                    account_id = random.choice(self.accounts)
                    self.create_random_task(account_id)
                    
            elif activity_type == "check_tasks":
                with get_session() as session:
                    tasks = session.query(PublishTask).filter_by(user_id=self.user_id).all()
                    self.log_activity(activity_type, {"tasks_found": len(tasks)})
                    
            elif activity_type == "update_account":
                if self.accounts:
                    account_id = random.choice(self.accounts)
                    account = get_user_instagram_account(account_id=account_id, user_id=self.user_id)
                    if account:
                        self.log_activity(activity_type, {"account": account.username})
                        
            elif activity_type == "mass_operation":
                # –ò–º–∏—Ç–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                accounts = get_user_instagram_accounts(user_id=self.user_id)
                processed = 0
                for account in accounts[:5]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    time.sleep(0.1)
                    processed += 1
                self.log_activity(activity_type, {"processed_accounts": processed})
                
            self.success_count += 1
            
        except Exception as e:
            self.error_count += 1
            raise e
            
    def create_random_task(self, account_id: int):
        """–°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É"""
        with get_session() as session:
            task_types = [TaskType.PHOTO, TaskType.VIDEO, TaskType.STORY, TaskType.REEL]
            
            task = PublishTask(
                user_id=self.user_id,
                account_id=account_id,
                task_type=random.choice(task_types),
                caption=f"Test post from {self.name} at {datetime.now().isoformat()}",
                scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 48))
            )
            session.add(task)
            session.commit()
            self.tasks.append(task.id)
            
    def log_activity(self, activity_type: str, data: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.activity_log.append({
            "time": datetime.now().isoformat(),
            "activity": activity_type,
            "data": data
        })
        
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        total_time = (datetime.now() - self.start_time).total_seconds()
        
        return {
            "user_id": self.user_id,
            "name": self.name,
            "profile": self.profile,
            "accounts_created": len(self.accounts),
            "tasks_created": len(self.tasks),
            "total_activities": len(self.activity_log),
            "success_count": self.success_count,
            "error_count": self.error_count,
            "error_rate": self.error_count / max(self.success_count + self.error_count, 1),
            "total_time_seconds": total_time,
            "activities_per_minute": len(self.activity_log) / max(total_time / 60, 1)
        }

class SystemServiceSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.services = {}
        self.running = False
        self.stats = {
            "smart_validator": {"cycles": 0, "accounts_processed": 0, "errors": 0},
            "account_validator": {"cycles": 0, "accounts_processed": 0, "errors": 0},
            "proxy_manager": {"cycles": 0, "accounts_processed": 0, "errors": 0},
            "health_monitor": {"cycles": 0, "status_checks": 0, "errors": 0}
        }
        
    def start_smart_validator(self):
        """–ó–∞–ø—É—Å–∫ —Å–º–∞—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        def run_validator():
            validator = SmartValidatorService()
            
            while self.running:
                try:
                    logger.info("üîç SmartValidator: –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    cache = get_user_cache()
                    users = cache.get_active_users_safe()
                    
                    if users:
                        processing_state = ProcessingState("smart_validator_simulation")
                        processing_state.start_cycle(users)
                        
                        processed = 0
                        for user_id in users:
                            processing_state.start_user_processing(user_id)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_accounts = get_user_instagram_accounts(user_id=user_id)
                            
                            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
                            for account in user_accounts:
                                # –°–ª—É—á–∞–π–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                                if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
                                    logger.debug(f"üìã SmartValidator: –ê–∫–∫–∞—É–Ω—Ç {account.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                                processed += 1
                                time.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                
                            processing_state.complete_user_processing(user_id, True)
                            
                        processing_state.complete_cycle()
                        
                        self.stats["smart_validator"]["cycles"] += 1
                        self.stats["smart_validator"]["accounts_processed"] += processed
                        
                        logger.info(f"‚úÖ SmartValidator: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    time.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    
                except Exception as e:
                    self.stats["smart_validator"]["errors"] += 1
                    logger.error(f"‚ùå SmartValidator: –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
                    time.sleep(10)
                    
        thread = threading.Thread(target=run_validator, name="SmartValidator")
        thread.daemon = True
        thread.start()
        self.services["smart_validator"] = thread
        
    def start_account_validator(self):
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        def run_validator():
            validator = AccountValidatorService()
            
            while self.running:
                try:
                    logger.info("üîß AccountValidator: –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    
                    cache = get_user_cache()
                    users = cache.get_active_users_safe()
                    
                    if users:
                        processing_state = ProcessingState("account_validator_simulation")
                        processing_state.start_cycle(users)
                        
                        processed = 0
                        for user_id in users:
                            processing_state.start_user_processing(user_id)
                            
                            user_accounts = get_user_instagram_accounts(user_id=user_id)
                            
                            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                            for account in user_accounts:
                                # –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                                if random.random() < 0.05:  # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
                                    logger.debug(f"üîß AccountValidator: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
                                    time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
                                processed += 1
                                
                            processing_state.complete_user_processing(user_id, True)
                            
                        processing_state.complete_cycle()
                        
                        self.stats["account_validator"]["cycles"] += 1
                        self.stats["account_validator"]["accounts_processed"] += processed
                        
                        logger.info(f"‚úÖ AccountValidator: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {processed} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    
                    time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    
                except Exception as e:
                    self.stats["account_validator"]["errors"] += 1
                    logger.error(f"‚ùå AccountValidator: –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
                    time.sleep(15)
                    
        thread = threading.Thread(target=run_validator, name="AccountValidator")
        thread.daemon = True
        thread.start()
        self.services["account_validator"] = thread
        
    def start_proxy_manager(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏"""
        def run_proxy_manager():
            while self.running:
                try:
                    logger.info("üåê ProxyManager: –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
                    cache = get_user_cache()
                    users = cache.get_active_users_safe()
                    
                    if users:
                        processing_state = ProcessingState("proxy_manager_simulation")
                        processing_state.start_cycle(users)
                        
                        processed = 0
                        for user_id in users:
                            processing_state.start_user_processing(user_id)
                            
                            user_accounts = get_user_instagram_accounts(user_id=user_id)
                            
                            # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
                            for account in user_accounts:
                                # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
                                if random.random() < 0.02:  # 2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –ø—Ä–æ–∫—Å–∏
                                    logger.debug(f"üåê ProxyManager: –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {account.username}")
                                processed += 1
                                
                            processing_state.complete_user_processing(user_id, True)
                            
                        processing_state.complete_cycle()
                        
                        self.stats["proxy_manager"]["cycles"] += 1
                        self.stats["proxy_manager"]["accounts_processed"] += processed
                        
                        logger.info(f"‚úÖ ProxyManager: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    
                    time.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    
                except Exception as e:
                    self.stats["proxy_manager"]["errors"] += 1
                    logger.error(f"‚ùå ProxyManager: –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
                    time.sleep(20)
                    
        thread = threading.Thread(target=run_proxy_manager, name="ProxyManager")
        thread.daemon = True
        thread.start()
        self.services["proxy_manager"] = thread
        
    def start_health_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        def run_health_monitor():
            monitor = get_health_monitor()
            
            while self.running:
                try:
                    logger.info("üíä HealthMonitor: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
                    health_result = monitor.perform_health_check()
                    
                    self.stats["health_monitor"]["cycles"] += 1
                    self.stats["health_monitor"]["status_checks"] += len(health_result.get("checks", []))
                    
                    status = health_result.get("status", "UNKNOWN")
                    logger.info(f"üíä HealthMonitor: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã - {status}")
                    
                    time.sleep(45)  # 45 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    
                except Exception as e:
                    self.stats["health_monitor"]["errors"] += 1
                    logger.error(f"‚ùå HealthMonitor: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                    time.sleep(15)
                    
        thread = threading.Thread(target=run_health_monitor, name="HealthMonitor")
        thread.daemon = True
        thread.start()
        self.services["health_monitor"] = thread
        
    def start_all_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã...")
        self.running = True
        
        self.start_smart_validator()
        self.start_account_validator()
        self.start_proxy_manager()
        self.start_health_monitor()
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        
    def stop_all_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã...")
        self.running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for name, thread in self.services.items():
            thread.join(timeout=5)
            logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    def get_service_statistics(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return self.stats.copy()

class ProductionSimulationTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, num_users: int = 15, simulation_duration: int = 10):
        self.num_users = num_users
        self.simulation_duration = simulation_duration  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        self.users = []
        self.service_simulator = SystemServiceSimulator()
        self.test_results = {}
        self.start_time = datetime.now()
        self.isolation_violations = []
        
    def create_production_users(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        logger.info(f"üë• –°–æ–∑–¥–∞—é {self.num_users} –ø—Ä–æ–¥–∞–∫—à–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        profiles = ["light", "normal", "heavy", "vip"]
        user_names = [
            "Alice", "Bob", "Charlie", "Diana", "Emma", "Frank", "Grace", "Henry",
            "Ivy", "Jack", "Kate", "Liam", "Mia", "Noah", "Olivia", "Paul",
            "Quinn", "Ruby", "Sam", "Tina"
        ]
        
        for i in range(self.num_users):
            user_id = 2000000 + i  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–∞
            name = user_names[i % len(user_names)] + f"_prod_{i+1}"
            profile = profiles[i % len(profiles)]
            
            user = ProductionUser(user_id, name, profile)
            self.users.append(user)
            
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for profile in profiles:
            count = sum(1 for u in self.users if u.profile == profile)
            logger.info(f"   {profile}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
    def setup_production_data(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã–µ"""
        logger.info("üì¶ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã–µ...")
        
        total_accounts = 0
        with ThreadPoolExecutor(max_workers=5) as executor:
            futures = []
            
            for user in self.users:
                future = executor.submit(user.create_realistic_accounts)
                futures.append((user, future))
                
            for user, future in futures:
                try:
                    future.result(timeout=30)
                    total_accounts += len(user.accounts)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {user.name}: {e}")
                    
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    def start_user_simulation(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üé¨ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–º—É–ª—è—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ {self.simulation_duration} –º–∏–Ω—É—Ç...")
        
        with ThreadPoolExecutor(max_workers=8) as executor:
            futures = []
            
            for user in self.users:
                future = executor.submit(user.simulate_user_activity, self.simulation_duration)
                futures.append((user, future))
                
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completed = 0
            for user, future in futures:
                try:
                    future.result()
                    completed += 1
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –∑–∞–≤–µ—Ä—à–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({completed}/{len(self.users)})")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}: {e}")
                    
        logger.info(f"üèÅ –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed}/{len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    def monitor_isolation_during_simulation(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–æ–ª—è—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
        def isolation_monitor():
            logger.info("üîç –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–æ–ª—è—Ü–∏–∏...")
            
            check_interval = 20  # —Å–µ–∫—É–Ω–¥ - –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            end_time = datetime.now() + timedelta(minutes=self.simulation_duration)
            
            while datetime.now() < end_time:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ–ª—å—à–µ –¥–ª—è 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
                    sample_users = random.sample(self.users, min(8, len(self.users)))
                    
                    for user in sample_users:
                        violations = self.check_user_isolation(user)
                        if violations:
                            self.isolation_violations.extend(violations)
                            
                    time.sleep(check_interval)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–æ–ª—è—Ü–∏–∏: {e}")
                    time.sleep(10)
                    
            logger.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–æ–ª—è—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        monitor_thread = threading.Thread(target=isolation_monitor, name="IsolationMonitor")
        monitor_thread.daemon = True
        monitor_thread.start()
        return monitor_thread
        
    def check_user_isolation(self, user: ProductionUser) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–ª—è—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        violations = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_accounts = get_user_instagram_accounts(user_id=user.user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for account in user_accounts:
                if account.user_id != user.user_id:
                    violations.append({
                        "type": "wrong_user_id",
                        "user_id": user.user_id,
                        "account_id": account.id,
                        "account_username": account.username,
                        "actual_user_id": account.user_id,
                        "timestamp": datetime.now().isoformat()
                    })
                    
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            other_users = random.sample([u for u in self.users if u.user_id != user.user_id], 2)
            
            for other_user in other_users:
                if other_user.accounts:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç
                        foreign_account = get_user_instagram_account(
                            account_id=other_user.accounts[0],
                            user_id=user.user_id
                        )
                        if foreign_account:
                            violations.append({
                                "type": "unauthorized_access",
                                "user_id": user.user_id,
                                "accessed_account_id": foreign_account.id,
                                "accessed_account_username": foreign_account.username,
                                "actual_owner": other_user.user_id,
                                "timestamp": datetime.now().isoformat()
                            })
                    except:
                        # –≠—Ç–æ —Ö–æ—Ä–æ—à–æ - –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        pass
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –¥–ª—è {user.name}: {e}")
            
        return violations
        
    def analyze_system_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = []
        total_activities = 0
        total_errors = 0
        
        for user in self.users:
            stats = user.get_statistics()
            user_stats.append(stats)
            total_activities += stats["total_activities"]
            total_errors += stats["error_count"]
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        service_stats = self.service_simulator.get_service_statistics()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏
        isolation_stats = {
            "violations_found": len(self.isolation_violations),
            "violation_types": {},
            "affected_users": set()
        }
        
        for violation in self.isolation_violations:
            violation_type = violation["type"]
            isolation_stats["violation_types"][violation_type] = \
                isolation_stats["violation_types"].get(violation_type, 0) + 1
            isolation_stats["affected_users"].add(violation["user_id"])
            
        isolation_stats["affected_users"] = len(isolation_stats["affected_users"])
        
        self.test_results = {
            "test_duration_minutes": self.simulation_duration,
            "users": {
                "total": len(self.users),
                "by_profile": {profile: sum(1 for u in self.users if u.profile == profile) 
                             for profile in ["light", "normal", "heavy", "vip"]},
                "total_activities": total_activities,
                "total_errors": total_errors,
                "error_rate": total_errors / max(total_activities, 1),
                "stats": user_stats
            },
            "services": service_stats,
            "isolation": isolation_stats,
            "system": {
                "active_users_found": len(get_user_cache().get_active_users_safe()),
                "processing_states": health_check_processing_states(),
                "health_status": get_health_monitor().get_health_summary()
            }
        }
        
        return self.test_results
        
    def cleanup_production_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—â–∞—é –ø—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã–µ...")
        
        total_deleted_accounts = 0
        total_deleted_tasks = 0
        
        try:
            with get_session() as session:
                for user in self.users:
                    # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
                    for account_id in user.accounts:
                        try:
                            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–Ω–∞—á–∞–ª–∞
                            session.query(PublishTask).filter_by(account_id=account_id).delete()
                            session.query(WarmupTask).filter_by(account_id=account_id).delete()
                            
                            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                            session.query(InstagramAccount).filter_by(id=account_id).delete()
                            total_deleted_accounts += 1
                            
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
                            
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    deleted_tasks = session.query(PublishTask).filter_by(user_id=user.user_id).delete()
                    total_deleted_tasks += deleted_tasks
                    
                session.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_deleted_accounts}")
        logger.info(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {total_deleted_tasks}")
        
    def run_comprehensive_production_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–∞"""
        logger.info("=" * 100)
        logger.info("üè≠ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –ò–ú–ò–¢–ê–¶–ò–ò –ü–†–û–î–ê–ö–®–ù –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 100)
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.create_production_users()
            
            # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.setup_production_data()
            
            # 3. –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            self.service_simulator.start_all_services()
            
            # 4. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–æ–ª—è—Ü–∏–∏
            isolation_monitor = self.monitor_isolation_during_simulation()
            
            # 5. –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.start_user_simulation()
            
            # 6. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            isolation_monitor.join(timeout=10)
            
            # 7. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            self.service_simulator.stop_all_services()
            
            # 8. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.analyze_system_performance()
            
            # 9. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.print_final_results()
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_production_data()
            
    def print_final_results(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("=" * 100)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–õ–ù–û–ì–û –ü–†–û–î–ê–ö–®–ù –¢–ï–°–¢–ê")
        logger.info("=" * 100)
        
        results = self.test_results
        total_time = (datetime.now() - self.start_time).total_seconds()
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥ ({self.simulation_duration} –º–∏–Ω—É—Ç —Å–∏–º—É–ª—è—Ü–∏–∏)")
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {results['users']['total']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º
        logger.info("üë§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º:")
        for profile, count in results['users']['by_profile'].items():
            logger.info(f"   {profile}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info(f"üé¨ –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
        logger.info(f"   üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {results['users']['total_activities']}")
        logger.info(f"   ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {results['users']['total_errors']}")
        logger.info(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {results['users']['error_rate']:.2%}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        logger.info("üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        for service, stats in results['services'].items():
            logger.info(f"   {service}:")
            logger.info(f"      –¶–∏–∫–ª–æ–≤: {stats['cycles']}")
            logger.info(f"      –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['accounts_processed']}")
            logger.info(f"      –û—à–∏–±–æ–∫: {stats['errors']}")
            
        # –ò–∑–æ–ª—è—Ü–∏—è
        isolation = results['isolation']
        logger.info(f"üîí –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"   ‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {isolation['violations_found']}")
        logger.info(f"   üë• –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {isolation['affected_users']}")
        
        if isolation['violation_types']:
            logger.info("   üìã –¢–∏–ø—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π:")
            for vtype, count in isolation['violation_types'].items():
                logger.info(f"      {vtype}: {count}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        logger.info("=" * 100)
        
        success_criteria = {
            "user_error_rate": results['users']['error_rate'] < 0.05,  # < 5% –æ—à–∏–±–æ–∫
            "isolation_violations": isolation['violations_found'] == 0,
            "service_errors": all(stats['errors'] == 0 for stats in results['services'].values()),
            "system_health": results['system']['health_status'].get('current_status') == 'HEALTHY'
        }
        
        all_success = all(success_criteria.values())
        
        if all_success:
            logger.info("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ù!")
        else:
            logger.error("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            
        logger.info("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:")
        for criterion, passed in success_criteria.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            logger.info(f"   {criterion}: {status}")
            
        logger.info("=" * 100)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞: 15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 15 –º–∏–Ω—É—Ç —Å–∏–º—É–ª—è—Ü–∏–∏
    test = ProductionSimulationTest(num_users=15, simulation_duration=15)
    test.run_comprehensive_production_test()

if __name__ == "__main__":
    main() 