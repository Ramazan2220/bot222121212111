#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏
"""

import logging
import random
import time
import asyncio
import threading
from typing import List, Dict, Any
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('test_isolation_detailed.log')
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from database.db_manager import get_session, add_instagram_account
from database.models import InstagramAccount, Proxy, PublishTask, WarmupTask, TaskType, WarmupStatus
from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
from database.user_management import get_active_users, get_user_info
from utils.user_cache import get_user_cache, process_users_with_limits
from utils.processing_state import ProcessingState, health_check_processing_states
from utils.health_monitor import get_health_monitor
from utils.smart_validator_service import SmartValidatorService
from utils.account_validator_service import AccountValidatorService
from utils.proxy_manager import distribute_proxies, get_proxies

class VirtualUser:
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, user_id: int, name: str, accounts_count: int = 3):
        self.user_id = user_id
        self.name = name
        self.accounts_count = accounts_count
        self.accounts = []
        self.tasks = []
        self.processing_results = {}
        
    def create_accounts(self):
        """–°–æ–∑–¥–∞—Ç—å Instagram –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üë§ {self.name}: –°–æ–∑–¥–∞—é {self.accounts_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        with get_session() as session:
            for i in range(self.accounts_count):
                username = f"{self.name.lower()}_account_{i+1}_{random.randint(1000,9999)}"
                password = f"password_{self.user_id}_{i+1}"
                
                account = InstagramAccount(
                    user_id=self.user_id,
                    username=username,
                    password=password,
                    status='active',
                    is_active=True,
                    email=f"{username}@test.com"
                )
                
                session.add(account)
                session.commit()
                
                self.accounts.append(account.id)
                logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {username} (ID: {account.id})")
                
        logger.info(f"üë§ {self.name}: –°–æ–∑–¥–∞–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
    def create_tasks(self):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üë§ {self.name}: –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏...")
        
        with get_session() as session:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            for account_id in self.accounts:
                # Publish task
                publish_task = PublishTask(
                    user_id=self.user_id,
                    account_id=account_id,
                    task_type=TaskType.PHOTO,
                    caption=f"Test post from {self.name}",
                    scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 24))
                )
                session.add(publish_task)
                self.tasks.append(('publish', publish_task))
                
                # Warmup task
                warmup_task = WarmupTask(
                    account_id=account_id,
                    status=WarmupStatus.PENDING,
                    settings={
                        'task_type': 'like',
                        'target_count': random.randint(10, 50),
                        'user_id': self.user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                    }
                )
                session.add(warmup_task)
                self.tasks.append(('warmup', warmup_task))
                
            session.commit()
            
        logger.info(f"üë§ {self.name}: –°–æ–∑–¥–∞–Ω–æ {len(self.tasks)} –∑–∞–¥–∞—á")
        
    def verify_isolation(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üîç {self.name}: –ü—Ä–æ–≤–µ—Ä—è—é –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        results = {
            'user_id': self.user_id,
            'name': self.name,
            'accounts_created': len(self.accounts),
            'accounts_accessible': 0,
            'accounts_isolated': True,
            'foreign_accounts_accessible': 0,
            'tasks_isolated': True,
            'errors': []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
            user_accounts = get_user_instagram_accounts(user_id=self.user_id)
            results['accounts_accessible'] = len(user_accounts)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
            for account in user_accounts:
                if account.user_id != self.user_id:
                    results['accounts_isolated'] = False
                    results['errors'].append(f"–ü–æ–ª—É—á–µ–Ω —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç: {account.username} (user_id: {account.user_id})")
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            all_users = get_active_users()
            for other_user_id in all_users:
                if other_user_id != self.user_id:
                    other_accounts = get_user_instagram_accounts(user_id=other_user_id)
                    if other_accounts:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –Ω–∞—à user_id
                        try:
                            foreign_account = get_user_instagram_account(
                                account_id=other_accounts[0].id, 
                                user_id=self.user_id
                            )
                            if foreign_account:
                                results['foreign_accounts_accessible'] += 1
                                results['accounts_isolated'] = False
                                results['errors'].append(f"–ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É: {foreign_account.username}")
                        except:
                            # –≠—Ç–æ —Ö–æ—Ä–æ—à–æ - –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω
                            pass
                            
            logger.info(f"   ‚úÖ {self.name}: –ò–∑–æ–ª—è—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {'‚úÖ –û–ö' if results['accounts_isolated'] else '‚ùå –ù–ê–†–£–®–ï–ù–ê'}")
            
        except Exception as e:
            results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏: {str(e)}")
            logger.error(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏: {e}")
            
        return results

class RealUserIsolationTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, num_users: int = 8):
        self.num_users = num_users
        self.virtual_users = []
        self.test_results = {}
        self.start_time = datetime.now()
        
    def create_virtual_users(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üöÄ –°–æ–∑–¥–∞—é {self.num_users} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        user_names = [
            "Alice", "Bob", "Charlie", "Diana", "Emma", 
            "Frank", "Grace", "Henry", "Ivy", "Jack"
        ]
        
        for i in range(self.num_users):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id (–Ω–∞—á–∏–Ω–∞–µ–º —Å 1000000 —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏)
            user_id = 1000000 + i
            name = user_names[i % len(user_names)] + f"_{i+1}"
            accounts_count = random.randint(2, 5)
            
            virtual_user = VirtualUser(user_id, name, accounts_count)
            self.virtual_users.append(virtual_user)
            
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.virtual_users)} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    def setup_user_data(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üì¶ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user in self.virtual_users:
            logger.info(f"üë§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.name}")
            user.create_accounts()
            user.create_tasks()
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            
        logger.info("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
    def test_user_isolation(self):
        """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É—é –∏–∑–æ–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        isolation_results = []
        
        for user in self.virtual_users:
            result = user.verify_isolation()
            isolation_results.append(result)
            
        self.test_results['isolation'] = isolation_results
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_users = len(isolation_results)
        isolated_users = sum(1 for r in isolation_results if r['accounts_isolated'])
        users_with_errors = sum(1 for r in isolation_results if r['errors'])
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏:")
        logger.info(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        logger.info(f"   ‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {isolated_users}")
        logger.info(f"   ‚ùå –° –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏: {total_users - isolated_users}")
        logger.info(f"   ‚ö†Ô∏è –° –æ—à–∏–±–∫–∞–º–∏: {users_with_errors}")
        
        return isolation_results
        
    def test_concurrent_processing(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        def process_user_accounts(user: VirtualUser):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                logger.info(f"üîÑ {user.name}: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                accounts = get_user_instagram_accounts(user_id=user.user_id)
                
                processed_accounts = []
                for account in accounts:
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                    processing_time = random.uniform(0.1, 0.5)
                    time.sleep(processing_time)
                    
                    processed_accounts.append({
                        'account_id': account.id,
                        'username': account.username,
                        'user_id': account.user_id,
                        'processing_time': processing_time
                    })
                    
                user.processing_results = {
                    'processed_accounts': processed_accounts,
                    'total_time': sum(a['processing_time'] for a in processed_accounts),
                    'success': True
                }
                
                logger.info(f"‚úÖ {user.name}: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                
            except Exception as e:
                user.processing_results = {
                    'error': str(e),
                    'success': False
                }
                logger.error(f"‚ùå {user.name}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        threads = []
        for user in self.virtual_users:
            thread = threading.Thread(target=process_user_accounts, args=(user,))
            threads.append(thread)
            thread.start()
            
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_processing = sum(1 for u in self.virtual_users if u.processing_results.get('success', False))
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        logger.info(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.virtual_users)}")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_processing}")
        logger.info(f"   ‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {len(self.virtual_users) - successful_processing}")
        
        self.test_results['concurrent_processing'] = {
            'total_users': len(self.virtual_users),
            'successful': successful_processing,
            'failed': len(self.virtual_users) - successful_processing
        }
        
    def test_system_services_isolation(self):
        """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö"""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é –∏–∑–æ–ª—è—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cache = get_user_cache()
        cache.force_refresh()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –Ω–∞—à–∏—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö)
        active_users = cache.get_active_users_safe()
        virtual_user_ids = [u.user_id for u in self.virtual_users]
        
        logger.info(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(active_users)}")
        logger.info(f"üë• –ù–∞—à–∏—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(virtual_user_ids)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ
        found_virtual_users = [uid for uid in virtual_user_ids if uid in active_users]
        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found_virtual_users)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        processing_state = ProcessingState("test_system_services")
        processing_state.start_cycle(found_virtual_users)
        
        processed_users = []
        for user_id in found_virtual_users:
            try:
                processing_state.start_user_processing(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–µ—Ç–æ–¥
                user_accounts = get_user_instagram_accounts(user_id=user_id)
                user_info = get_user_info(user_id)
                
                processed_users.append({
                    'user_id': user_id,
                    'accounts_count': len(user_accounts),
                    'user_info': user_info
                })
                
                processing_state.complete_user_processing(user_id, True)
                logger.info(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {len(user_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                
            except Exception as e:
                processing_state.complete_user_processing(user_id, False, str(e))
                logger.error(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –û—à–∏–±–∫–∞ - {e}")
                
        processing_state.complete_cycle()
        
        self.test_results['system_services'] = {
            'total_virtual_users': len(virtual_user_ids),
            'found_in_system': len(found_virtual_users),
            'processed_successfully': len(processed_users),
            'processing_details': processed_users
        }
        
    def test_data_cross_contamination(self):
        """–¢–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üî¨ –¢–µ—Å—Ç–∏—Ä—É—é –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        contamination_found = False
        contamination_details = []
        
        for user in self.virtual_users:
            user_accounts = get_user_instagram_accounts(user_id=user.user_id)
            
            for account in user_accounts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if account.user_id != user.user_id:
                    contamination_found = True
                    contamination_details.append({
                        'requesting_user': user.user_id,
                        'account_id': account.id,
                        'account_username': account.username,
                        'actual_owner': account.user_id,
                        'issue': 'wrong_user_id'
                    })
                    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, user1 in enumerate(self.virtual_users):
            for j, user2 in enumerate(self.virtual_users):
                if i != j:  # –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã user2 –æ—Ç –∏–º–µ–Ω–∏ user1
                        user2_accounts = get_user_instagram_accounts(user_id=user2.user_id)
                        if user2_accounts:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç user2 —á–µ—Ä–µ–∑ user1
                            foreign_account = get_user_instagram_account(
                                account_id=user2_accounts[0].id,
                                user_id=user1.user_id
                            )
                            if foreign_account:
                                contamination_found = True
                                contamination_details.append({
                                    'requesting_user': user1.user_id,
                                    'account_id': foreign_account.id,
                                    'account_username': foreign_account.username,
                                    'actual_owner': user2.user_id,
                                    'issue': 'unauthorized_access'
                                })
                    except:
                        # –≠—Ç–æ —Ö–æ—Ä–æ—à–æ - –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        pass
                        
        logger.info(f"üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è:")
        logger.info(f"   ‚ùå –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {'–î–∞' if contamination_found else '–ù–µ—Ç'}")
        logger.info(f"   üìã –°–ª—É—á–∞–µ–≤ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: {len(contamination_details)}")
        
        if contamination_details:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª—É—á–∞–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
            for detail in contamination_details:
                logger.warning(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {detail['requesting_user']} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É {detail['account_username']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {detail['actual_owner']}")
                
        self.test_results['contamination'] = {
            'found': contamination_found,
            'cases': len(contamination_details),
            'details': contamination_details
        }
        
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—â–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        with get_session() as session:
            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            deleted_accounts = 0
            for user in self.virtual_users:
                for account_id in user.accounts:
                    account = session.query(InstagramAccount).filter_by(id=account_id).first()
                    if account:
                        session.delete(account)
                        deleted_accounts += 1
                        
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏
            deleted_tasks = 0
            for user in self.virtual_users:
                # –£–¥–∞–ª—è–µ–º publish tasks
                publish_tasks = session.query(PublishTask).filter_by(user_id=user.user_id).all()
                for task in publish_tasks:
                    session.delete(task)
                    deleted_tasks += 1
                    
                # –£–¥–∞–ª—è–µ–º warmup tasks (–ø–æ account_id, —Ç–∞–∫ –∫–∞–∫ user_id –≤ settings)
                user_account_ids = [aid for aid in user.accounts]
                if user_account_ids:
                    warmup_tasks = session.query(WarmupTask).filter(WarmupTask.account_id.in_(user_account_ids)).all()
                    for task in warmup_tasks:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if task.settings and task.settings.get('user_id') == user.user_id:
                            session.delete(task)
                            deleted_tasks += 1
                    
            session.commit()
            
        logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {deleted_accounts}")
        logger.info(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {deleted_tasks}")
        
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logger.info("=" * 100)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò –° –í–ò–†–¢–£–ê–õ–¨–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
        logger.info("=" * 100)
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.create_virtual_users()
            
            # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.setup_user_data()
            
            # 3. –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.test_user_isolation()
            
            # 4. –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.test_concurrent_processing()
            
            # 5. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            self.test_system_services_isolation()
            
            # 6. –¢–µ—Å—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
            self.test_data_cross_contamination()
            
            # 7. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            self.analyze_results()
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_test_data()
            
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("=" * 100)
        logger.info("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê")
        logger.info("=" * 100)
        
        total_time = (datetime.now() - self.start_time).total_seconds()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üë• –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.virtual_users)}")
        
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'isolation' in self.test_results:
            isolation_results = self.test_results['isolation']
            isolated_users = sum(1 for r in isolation_results if r['accounts_isolated'])
            logger.info(f"üîí –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {isolated_users}/{len(isolation_results)} ({'‚úÖ –û–ö' if isolated_users == len(isolation_results) else '‚ùå –ù–ê–†–£–®–ï–ù–ê'})")
            
        # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if 'concurrent_processing' in self.test_results:
            concurrent = self.test_results['concurrent_processing']
            logger.info(f"üîÑ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {concurrent['successful']}/{concurrent['total_users']} ({'‚úÖ –û–ö' if concurrent['failed'] == 0 else '‚ùå –ü–†–û–ë–õ–ï–ú–´'})")
            
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        if 'system_services' in self.test_results:
            services = self.test_results['system_services']
            logger.info(f"üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {services['processed_successfully']}/{services['found_in_system']} ({'‚úÖ –û–ö' if services['processed_successfully'] == services['found_in_system'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´'})")
            
        # –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ
        if 'contamination' in self.test_results:
            contamination = self.test_results['contamination']
            logger.info(f"üî¨ –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {'‚ùå –ù–ê–ô–î–ï–ù–û' if contamination['found'] else '‚úÖ –ù–ï –ù–ê–ô–î–ï–ù–û'} ({contamination['cases']} —Å–ª—É—á–∞–µ–≤)")
            
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        all_tests_passed = (
            self.test_results.get('isolation', [{}])[0].get('accounts_isolated', False) and
            self.test_results.get('concurrent_processing', {}).get('failed', 1) == 0 and
            not self.test_results.get('contamination', {}).get('found', True)
        )
        
        logger.info("=" * 100)
        if all_tests_passed:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            logger.error("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–∑–æ–ª—è—Ü–∏–∏!")
        logger.info("=" * 100)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    test = RealUserIsolationTest(num_users=8)
    test.run_comprehensive_test()

if __name__ == "__main__":
    main() 