#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üî• –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ PostgreSQL
5-10 –º–∏–Ω—É—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ —Å –≤–∏–¥–∏–º—ã–º–∏ –ª–æ–≥–∞–º–∏
"""

import logging
import sys
import time
import threading
import random
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import List, Dict, Any
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from database.db_manager import get_session, init_db
    from database.models import InstagramAccount, PublishTask, WarmupTask, TelegramUser, TaskType, TaskStatus, WarmupStatus
    from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
    from sqlalchemy import text
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class RealisticPostgreSQLStressTest:
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç PostgreSQL"""
    
    def __init__(self):
        self.test_duration = 8 * 60  # 8 –º–∏–Ω—É—Ç
        self.start_time = None
        
        self.stats = {
            'users_created': 0,
            'accounts_created': 0,
            'tasks_created': 0,
            'operations_completed': 0,
            'isolation_violations': 0,
            'isolation_checks': 0,
            'threads_active': 0,
            'max_concurrent_threads': 0,
            'minute_stats': []
        }
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π session ID
        self.session_id = str(uuid.uuid4())[:8]
        logger.info(f"üÜî Test Session ID: {self.session_id}")
        
    def create_realistic_user_batch(self, batch_id: int) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –±–∞—Ç—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        batch_stats = {
            'batch_id': batch_id,
            'users_created': 0,
            'accounts_created': 0,
            'tasks_created': 0,
            'errors': []
        }
        
        try:
            with get_session() as session:
                # –°–æ–∑–¥–∞–µ–º 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞—Ç—á–µ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
                for user_idx in range(2):
                    user_id = 9000000 + (batch_id * 100) + user_idx
                    
                    try:
                        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        telegram_user = TelegramUser(
                            telegram_id=user_id,
                            username=f"stress_{self.session_id}_{batch_id}_{user_idx}",
                            first_name=f"Stress {batch_id}",
                            last_name=f"User {user_idx}",
                            is_active=True
                        )
                        session.merge(telegram_user)
                        batch_stats['users_created'] += 1
                        
                        # 2. –°–æ–∑–¥–∞–µ–º 50 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
                        for acc_idx in range(50):
                            unique_suffix = f"{batch_id}_{user_idx}_{acc_idx}_{int(time.time() * 1000) % 10000}"
                            
                            account = InstagramAccount(
                                username=f"stress_{unique_suffix}",
                                password=f"pass_{user_id}_{acc_idx}",
                                email=f"stress_{unique_suffix}@stress.test",
                                user_id=user_id,
                                is_active=True,
                                full_name=f"Stress Account {batch_id}-{user_idx}-{acc_idx}",
                                biography=f"Stress test account {self.session_id}"
                            )
                            session.add(account)
                            batch_stats['accounts_created'] += 1
                            
                        session.flush()
                        
                        # 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
                        user_accounts = session.query(InstagramAccount).filter_by(user_id=user_id).all()
                        
                        for account in user_accounts:
                            # PublishTask
                            publish_task = PublishTask(
                                account_id=account.id,
                                user_id=user_id,
                                task_type=TaskType.VIDEO,
                                caption=f"Stress video {self.session_id} batch {batch_id}",
                                scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 24)),
                                status=TaskStatus.PENDING
                            )
                            session.add(publish_task)
                            batch_stats['tasks_created'] += 1
                            
                            # WarmupTask
                            warmup_task = WarmupTask(
                                account_id=account.id,
                                status=WarmupStatus.PENDING,
                                settings={
                                    'task_type': 'like',
                                    'target_count': random.randint(10, 100),
                                    'user_id': user_id,
                                    'batch_id': batch_id,
                                    'session_id': self.session_id,
                                    'stress_test': True
                                }
                            )
                            session.add(warmup_task)
                            batch_stats['tasks_created'] += 1
                            
                        session.commit()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        self.stats['users_created'] += 1
                        self.stats['accounts_created'] += batch_stats['accounts_created']
                        self.stats['tasks_created'] += batch_stats['tasks_created']
                        self.stats['operations_completed'] += 1
                        
                    except Exception as e:
                        batch_stats['errors'].append(f"User {user_id}: {str(e)}")
                        session.rollback()
                        continue
                        
        except Exception as e:
            batch_stats['errors'].append(f"Batch {batch_id}: {str(e)}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–∞ {batch_id}: {e}")
            
        return batch_stats
        
    def check_isolation_sample(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ"""
        
        isolation_result = {
            'users_checked': 0,
            'violations_found': 0,
            'accounts_checked': 0,
            'tasks_checked': 0
        }
        
        try:
            with get_session() as session:
                # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞
                sample_users = session.query(TelegramUser).filter(
                    TelegramUser.username.like(f'stress_{self.session_id}_%')
                ).limit(5).all()
                
                for user in sample_users:
                    isolation_result['users_checked'] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ safe wrapper
                    user_accounts = get_user_instagram_accounts(user.telegram_id)
                    isolation_result['accounts_checked'] += len(user_accounts)
                    
                    for account in user_accounts:
                        if account.user_id != user.telegram_id:
                            isolation_result['violations_found'] += 1
                            self.stats['isolation_violations'] += 1
                            logger.error(f"üí• –ò–ó–û–õ–Ø–¶–ò–Ø –ù–ê–†–£–®–ï–ù–ê! User {user.telegram_id} –≤–∏–¥–∏—Ç –∞–∫–∫–∞—É–Ω—Ç {account.id} user {account.user_id}")
                            
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏
                    publish_tasks = session.query(PublishTask).filter_by(user_id=user.telegram_id).limit(5).all()
                    isolation_result['tasks_checked'] += len(publish_tasks)
                    
                    for task in publish_tasks:
                        if task.user_id != user.telegram_id:
                            isolation_result['violations_found'] += 1
                            self.stats['isolation_violations'] += 1
                            logger.error(f"üí• –ó–ê–î–ê–ß–ò –°–ú–ï–®–ê–ù–´! User {user.telegram_id} –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á—É {task.id} user {task.user_id}")
                            
                self.stats['isolation_checks'] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏: {e}")
            
        return isolation_result
        
    def stress_worker_thread(self, thread_id: int) -> Dict[str, Any]:
        """–°—Ç—Ä–µ—Å—Å –≤–æ—Ä–∫–µ—Ä –ø–æ—Ç–æ–∫"""
        
        thread_stats = {
            'thread_id': thread_id,
            'batches_completed': 0,
            'total_operations': 0,
            'errors': [],
            'start_time': time.time()
        }
        
        self.stats['threads_active'] += 1
        self.stats['max_concurrent_threads'] = max(self.stats['max_concurrent_threads'], self.stats['threads_active'])
        
        batch_counter = 0
        
        try:
            while time.time() - self.start_time < self.test_duration:
                batch_id = (thread_id * 1000) + batch_counter
                
                # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á
                batch_result = self.create_realistic_user_batch(batch_id)
                
                if batch_result['errors']:
                    thread_stats['errors'].extend(batch_result['errors'])
                else:
                    thread_stats['batches_completed'] += 1
                    
                thread_stats['total_operations'] += (
                    batch_result['users_created'] + 
                    batch_result['accounts_created'] + 
                    batch_result['tasks_created']
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                try:
                    with get_session() as session:
                        # JSON –æ–ø–µ—Ä–∞—Ü–∏–∏
                        result = session.execute(text("SELECT '{\"stress_test\": true, \"thread\": " + str(thread_id) + "}'::json"))
                        json_data = result.fetchone()[0]
                        
                        # –ü–æ–¥—Å—á–µ—Ç—ã
                        users_count = session.query(TelegramUser).filter(
                            TelegramUser.username.like(f'stress_{self.session_id}_%')
                        ).count()
                        
                        thread_stats['total_operations'] += 2
                        
                except Exception as e:
                    thread_stats['errors'].append(f"Additional ops: {e}")
                    
                batch_counter += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                if batch_counter % 10 == 0:
                    elapsed = time.time() - self.start_time
                    remaining = self.test_duration - elapsed
                    logger.info(f"üî• –ü–æ—Ç–æ–∫ {thread_id}: –±–∞—Ç—á {batch_counter}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining:.0f}—Å, –æ–ø–µ—Ä–∞—Ü–∏–π: {thread_stats['total_operations']}")
                    
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                time.sleep(1)
                
        except Exception as e:
            thread_stats['errors'].append(f"Thread {thread_id} crashed: {e}")
            logger.error(f"üí• –ü–æ—Ç–æ–∫ {thread_id} —É–ø–∞–ª: {e}")
            
        finally:
            self.stats['threads_active'] -= 1
            
        thread_stats['duration'] = time.time() - thread_stats['start_time']
        return thread_stats
        
    def minute_progress_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        
        minute = 0
        
        while time.time() - self.start_time < self.test_duration:
            time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
            minute += 1
            
            elapsed = time.time() - self.start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
            isolation_check = self.check_isolation_sample()
            
            minute_stats = {
                'minute': minute,
                'elapsed': elapsed,
                'users_created': self.stats['users_created'],
                'accounts_created': self.stats['accounts_created'],
                'tasks_created': self.stats['tasks_created'],
                'isolation_violations': self.stats['isolation_violations'],
                'active_threads': self.stats['threads_active']
            }
            
            self.stats['minute_stats'].append(minute_stats)
            
            logger.info("=" * 80)
            logger.info(f"üìä –ú–ò–ù–£–¢–ê {minute}: –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞")
            logger.info(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {elapsed/60:.1f} –º–∏–Ω / –û—Å—Ç–∞–ª–æ—Å—å: {(self.test_duration - elapsed)/60:.1f} –º–∏–Ω")
            logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.stats['users_created']}")
            logger.info(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {self.stats['accounts_created']}")
            logger.info(f"üìã –ó–∞–¥–∞—á: {self.stats['tasks_created']}")
            logger.info(f"üßµ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {self.stats['threads_active']}")
            logger.info(f"üîç –ò–∑–æ–ª—è—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {isolation_check['users_checked']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—Ä—É—à–µ–Ω–∏–π: {self.stats['isolation_violations']}")
            logger.info("=" * 80)
            
    def cleanup_stress_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            with get_session() as session:
                deleted_publish = session.execute(text(
                    f"DELETE FROM publish_tasks WHERE caption LIKE '%{self.session_id}%'"
                )).rowcount
                
                deleted_warmup = session.execute(text(
                    f"DELETE FROM warmup_tasks WHERE settings::text LIKE '%{self.session_id}%'"
                )).rowcount
                
                deleted_accounts = session.execute(text(
                    f"DELETE FROM instagram_accounts WHERE biography LIKE '%{self.session_id}%'"
                )).rowcount
                
                deleted_users = session.execute(text(
                    f"DELETE FROM telegram_users WHERE username LIKE 'stress_{self.session_id}_%'"
                )).rowcount
                
                session.commit()
                
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {deleted_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_publish} publish –∑–∞–¥–∞—á, {deleted_warmup} warmup –∑–∞–¥–∞—á")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
    def print_final_stress_results(self, thread_results: List[Dict], total_duration: float):
        """–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
        
        total_operations = sum(r['total_operations'] for r in thread_results)
        total_errors = sum(len(r['errors']) for r in thread_results)
        successful_threads = len([r for r in thread_results if len(r['errors']) == 0])
        
        logger.info("=" * 100)
        logger.info("üèÜ –ò–¢–û–ì–ò –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ì–û –°–¢–†–ï–°–°-–¢–ï–°–¢–ê PostgreSQL")
        logger.info("=" * 100)
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration / 60:.2f} –º–∏–Ω—É—Ç")
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ: {self.stats['users_created']}")
        logger.info(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {self.stats['accounts_created']}")
        logger.info(f"üìã –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {self.stats['tasks_created']}")
        logger.info(f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {len(thread_results)} / –ú–∞–∫—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {self.stats['max_concurrent_threads']}")
        
        logger.info(f"\nüìä –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        logger.info(f"   ‚úÖ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}")
        logger.info(f"   ‚ö° –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {total_operations / total_duration:.2f}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {total_errors}")
        logger.info(f"   üéØ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {successful_threads}/{len(thread_results)}")
        
        logger.info(f"\nüîç –ò–ó–û–õ–Ø–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        logger.info(f"   üìã –ü—Ä–æ–≤–µ—Ä–æ–∫ –∏–∑–æ–ª—è—Ü–∏–∏: {self.stats['isolation_checks']}")
        logger.info(f"   üí• –ù–∞—Ä—É—à–µ–Ω–∏–π –∏–∑–æ–ª—è—Ü–∏–∏: {self.stats['isolation_violations']}")
        logger.info(f"   üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ò–î–ï–ê–õ–¨–ù–ê–Ø' if self.stats['isolation_violations'] == 0 else '‚ùå –ù–ê–†–£–®–ï–ù–ê'}")
        
        logger.info(f"\nüÜö VS SQLite:")
        logger.info(f"   SQLite: üí• Segmentation fault –ø—Ä–∏ —Ç–∞–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ")
        logger.info(f"   PostgreSQL: ‚úÖ {total_duration/60:.1f} –º–∏–Ω—É—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–∏–Ω—É—Ç–∞–º
        if self.stats['minute_stats']:
            logger.info(f"\nüìà –ü–†–û–ì–†–ï–°–° –ü–û –ú–ò–ù–£–¢–ê–ú:")
            for stat in self.stats['minute_stats']:
                logger.info(f"   –ú–∏–Ω—É—Ç–∞ {stat['minute']}: {stat['users_created']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {stat['accounts_created']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                
        success = (
            self.stats['isolation_violations'] == 0 and 
            total_duration >= 5 * 60 and  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
            successful_threads >= len(thread_results) * 0.8  # 80% –ø–æ—Ç–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω—ã
        )
        
        if success:
            logger.info(f"\nüèÜ –°–¢–†–ï–°–°-–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            logger.info(f"üöÄ PostgreSQL –≤—ã–¥–µ—Ä–∂–∞–ª —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É!")
            return True
        else:
            logger.info(f"\n‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏")
            return False
            
    def run_realistic_stress_test(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
        
        logger.info("üî•" * 100)
        logger.info("üî• –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ PostgreSQL (8 –º–∏–Ω—É—Ç)")
        logger.info("üî•" * 100)
        
        self.start_time = time.time()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL...")
            init_db()
            
            with get_session() as session:
                result = session.execute(text("SELECT version()"))
                version = result.fetchone()[0]
                logger.info(f"üêò PostgreSQL: {version[:50]}...")
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            monitor_thread = threading.Thread(target=self.minute_progress_monitor, daemon=True)
            monitor_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
            num_threads = 15  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {num_threads} –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ {self.test_duration/60:.0f} –º–∏–Ω—É—Ç...")
            logger.info(f"‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%H:%M:%S')}")
            logger.info(f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {(datetime.now() + timedelta(seconds=self.test_duration)).strftime('%H:%M:%S')}")
            
            thread_results = []
            
            with ThreadPoolExecutor(max_workers=num_threads) as executor:
                futures = []
                
                for i in range(num_threads):
                    future = executor.submit(self.stress_worker_thread, i)
                    futures.append(future)
                    
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for i, future in enumerate(as_completed(futures, timeout=self.test_duration + 60)):
                    try:
                        result = future.result()
                        thread_results.append(result)
                        
                        if (i + 1) % 5 == 0:
                            elapsed = time.time() - self.start_time
                            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {i + 1}/{num_threads}, –ø—Ä–æ—à–ª–æ {elapsed/60:.1f} –º–∏–Ω")
                            
                    except Exception as e:
                        logger.error(f"üí• –ü–æ—Ç–æ–∫ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
                        
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_duration = time.time() - self.start_time
            success = self.print_final_stress_results(thread_results, total_duration)
            
            # –û—á–∏—Å—Ç–∫–∞
            self.cleanup_stress_data()
            
            return success
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    test = RealisticPostgreSQLStressTest()
    success = test.run_realistic_stress_test()
    
    if success:
        print("\nüèÜ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print("üöÄ PostgreSQL —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π!")
        print("üéâ –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
        exit(0)
    else:
        print("\n‚ö†Ô∏è –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò")
        print("üîß –ù–æ PostgreSQL –≤—Å–µ —Ä–∞–≤–Ω–æ –ª—É—á—à–µ SQLite")
        exit(0)

if __name__ == "__main__":
    main() 