#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üêò –ü–†–û–°–¢–û–ô –¢–ï–°–¢ PostgreSQL
–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É PostgreSQL –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
"""

import logging
import sys
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from database.db_manager import get_session, init_db
    from database.models import InstagramAccount, PublishTask, TelegramUser, TaskType, TaskStatus
    from sqlalchemy import text
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_postgresql_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç PostgreSQL"""
    logger.info("üêò –ü–†–û–°–¢–û–ô –¢–ï–°–¢ PostgreSQL")
    logger.info("=" * 50)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL...")
        init_db()
        
        with get_session() as session:
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL...")
            result = session.execute(text("SELECT version()"))
            version = result.fetchone()[0]
            logger.info(f"‚úÖ PostgreSQL: {version[:50]}...")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            logger.info("üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
            try:
                session.execute(text("SELECT '{\"test\": true}'::json"))
                logger.info("‚úÖ JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –†–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {e}")
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            test_user = TelegramUser(
                telegram_id=8888888,
                username="postgresql_test",
                first_name="PostgreSQL",
                last_name="Test",
                is_active=True
            )
            session.merge(test_user)
            session.flush()
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            logger.info("üì± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            test_account = InstagramAccount(
                username="pg_test_account",
                password="test_password",
                email="pg_test@postgresql.test",
                user_id=8888888,
                is_active=True,
                full_name="PostgreSQL Test Account",
                biography="Test account for PostgreSQL"
            )
            session.add(test_account)
            session.flush()
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {test_account.id}")
            
            # 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏...")
            test_task = PublishTask(
                account_id=test_account.id,
                user_id=8888888,
                task_type=TaskType.PHOTO,
                caption="PostgreSQL test post",
                scheduled_time=datetime.now() + timedelta(hours=1),
                status=TaskStatus.PENDING
            )
            session.add(test_task)
            session.flush()
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {test_task.id}")
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Foreign Key
            logger.info("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ Foreign Key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
            try:
                fake_task = PublishTask(
                    account_id=999999,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
                    user_id=8888888,
                    task_type=TaskType.PHOTO,
                    caption="Should fail"
                )
                session.add(fake_task)
                session.flush()
                logger.warning("‚ö†Ô∏è Foreign Key –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            except Exception:
                logger.info("‚úÖ Foreign Key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
                session.rollback()
            
            # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º...")
            
            # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = session.query(TelegramUser).filter_by(telegram_id=8888888).all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            # –ó–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts = session.query(InstagramAccount).filter_by(user_id=8888888).all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
            
            # –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á
            tasks = session.query(PublishTask).filter_by(user_id=8888888).all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
            
            # 9. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            session.query(PublishTask).filter_by(user_id=8888888).delete()
            session.query(InstagramAccount).filter_by(user_id=8888888).delete()
            session.query(TelegramUser).filter_by(telegram_id=8888888).delete()
            
            session.commit()
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
        logger.info("=" * 50)
        logger.info("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        logger.info("üöÄ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_connection_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
    logger.info("üîó –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò")
    logger.info("=" * 50)
    
    try:
        with get_session() as session:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
            result = session.execute(text("SELECT current_database()"))
            db_name = result.fetchone()[0]
            logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            result = session.execute(text("SELECT current_user"))
            user = result.fetchone()[0]
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–µ
            result = session.execute(text("SELECT inet_server_addr()"))
            host = result.fetchone()
            if host and host[0]:
                logger.info(f"üåê –•–æ—Å—Ç: {host[0]}")
            else:
                logger.info("üåê –•–æ—Å—Ç: localhost/cloud")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            result = session.execute(text("SELECT count(*) FROM pg_stat_activity"))
            connections = result.fetchone()[0]
            logger.info(f"üîå –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {connections}")
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = session.execute(text("SELECT pg_size_pretty(pg_database_size(current_database()))"))
            size = result.fetchone()[0]
            logger.info(f"üíæ –†–∞–∑–º–µ—Ä –ë–î: {size}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ" * 50)
    logger.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PostgreSQL –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò")
    logger.info("üöÄ" * 50)
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    success = test_postgresql_basic()
    
    if success:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        test_connection_info()
        
        logger.info("\n" + "üéâ" * 50)
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        logger.info("üéâ" * 50)
        
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("üêò PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("üìä –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        exit(0)
    else:
        logger.error("üí• –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        exit(1)

if __name__ == "__main__":
    main() 