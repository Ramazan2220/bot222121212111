#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üíÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò üíÄ
100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π x 500 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ = 50,000 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É
"""

import logging
import random
import time
import threading
import multiprocessing
import asyncio
import concurrent.futures
import queue
import gc
import sys
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
import sqlite3
import psutil
import os
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from database.db_manager import get_session
from database.models import InstagramAccount, PublishTask, TaskType, WarmupTask, WarmupStatus
from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
from database.user_management import get_active_users, get_user_info
from utils.user_cache import get_user_cache
from utils.processing_state import ProcessingState

class UltimateStressTest:
    """–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∑–æ–ª—è—Ü–∏–∏"""
    
    def __init__(self):
        self.users = []
        self.violations = []
        self.errors = []
        self.attack_results = {}
        self.start_time = datetime.now()
        self.total_accounts = 0
        self.total_tasks = 0
        
    def create_massive_user_base(self, user_count: int = 100, accounts_per_user: int = 500):
        """–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –±–∞–∑—É"""
        logger.info(f"üíÄ –°–û–ó–î–ê–Æ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–£–Æ –ë–ê–ó–£: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π x {accounts_per_user} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        logger.info(f"üíÄ –û–ë–©–ò–ô –û–ë–™–ï–ú: {user_count * accounts_per_user:,} –ê–ö–ö–ê–£–ù–¢–û–í!")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏
        batch_size = 5  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        total_batches = (user_count + batch_size - 1) // batch_size
        
        logger.info(f"üíÄ –°–æ–∑–¥–∞—é {total_batches} –±–∞—Ç—á–µ–π –ø–æ {batch_size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        with ThreadPoolExecutor(max_workers=10) as executor:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
            futures = []
            
            for batch_idx in range(total_batches):
                batch_start = batch_idx * batch_size
                batch_end = min(batch_start + batch_size, user_count)
                
                future = executor.submit(
                    self._create_user_batch_ultimate, 
                    batch_start, 
                    batch_end, 
                    accounts_per_user,
                    batch_idx,
                    total_batches
                )
                futures.append(future)
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            for future in as_completed(futures):
                try:
                    batch_users, batch_accounts, batch_tasks = future.result()
                    self.users.extend(batch_users)
                    self.total_accounts += batch_accounts
                    self.total_tasks += batch_tasks
                    
                    if len(self.users) % 10 == 0:
                        logger.info(f"üíÄ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}/{user_count}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–∞: {e}")
                    
        logger.info(f"‚úÖ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ë–ê–ó–ê –°–û–ó–î–ê–ù–ê:")
        logger.info(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users):,}")
        logger.info(f"   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {self.total_accounts:,}")
        logger.info(f"   üìã –ó–∞–¥–∞—á: {self.total_tasks:,}")
        
    def _create_user_batch_ultimate(self, start_idx: int, end_idx: int, accounts_per_user: int, batch_idx: int, total_batches: int):
        """–°–æ–∑–¥–∞—Ç—å –±–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        batch_users = []
        batch_accounts = 0
        batch_tasks = 0
        
        logger.info(f"üíÄ –ë–∞—Ç—á {batch_idx+1}/{total_batches}: —Å–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {start_idx}-{end_idx}")
        
        for i in range(start_idx, end_idx):
            user_id = 5000000 + i  # –ù–æ–≤–∞—è —Å–µ—Ä–∏—è ID
            name = f"UltimateUser_{i}"
            
            user_accounts = []
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–∞—Ä—Ç–∏—è–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                accounts_batch_size = 50
                accounts_batches = (accounts_per_user + accounts_batch_size - 1) // accounts_batch_size
                
                for acc_batch_idx in range(accounts_batches):
                    with get_session() as session:
                        acc_start = acc_batch_idx * accounts_batch_size
                        acc_end = min(acc_start + accounts_batch_size, accounts_per_user)
                        
                        for j in range(acc_start, acc_end):
                            username = f"ultimate_{i}_{j}_{random.randint(100000, 999999)}"
                            
                            account = InstagramAccount(
                                user_id=user_id,
                                username=username,
                                password=f"pass_{user_id}_{j}",
                                email=f"{username}@ultimate.test",
                                status='active',
                                is_active=True,
                                full_name=f"Ultimate Account {i}-{j}",
                                biography=f"Ultimate stress test account for user {i}"
                            )
                            
                            session.add(account)
                            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ commit
                            
                            user_accounts.append(account.id)
                            batch_accounts += 1
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            for task_type in [TaskType.PHOTO, TaskType.VIDEO]:
                                task = PublishTask(
                                    user_id=user_id,
                                    account_id=account.id,
                                    task_type=task_type,
                                    caption=f"Ultimate {task_type.value} from user {i}",
                                    scheduled_time=datetime.now() + timedelta(hours=random.randint(1, 72))
                                )
                                session.add(task)
                                batch_tasks += 1
                                
                            # Warmup –∑–∞–¥–∞—á–∞
                            warmup = WarmupTask(
                                account_id=account.id,
                                status=WarmupStatus.PENDING,
                                settings={
                                    'user_id': user_id, 
                                    'ultimate_test': True,
                                    'target_count': random.randint(50, 200)
                                }
                            )
                            session.add(warmup)
                            batch_tasks += 1
                            
                        session.commit()
                        
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                if i % 5 == 0:
                    logger.info(f"üíÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}: —Å–æ–∑–¥–∞–Ω–æ {len(user_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {e}")
                continue
                
            batch_users.append({
                'user_id': user_id,
                'name': name,
                'accounts': user_accounts,
                'accounts_count': len(user_accounts)
            })
            
        logger.info(f"‚úÖ –ë–∞—Ç—á {batch_idx+1}/{total_batches} –∑–∞–≤–µ—Ä—à–µ–Ω: {len(batch_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {batch_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return batch_users, batch_accounts, batch_tasks
        
    def ultimate_attack_1_massive_concurrent_requests(self):
        """–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ 1: –ú–∞—Å—Å–∏–≤–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        logger.info("üíÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–¢–ê–ö–ê 1: –ú–∞—Å—Å–∏–≤–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        logger.info(f"üíÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ 500 –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        
        violations = []
        total_operations = 0
        
        def ultra_aggressive_user_activity(user_batch):
            batch_violations = []
            batch_operations = 0
            
            for user in user_batch:
                try:
                    # 500 –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
                    operations_per_user = 500
                    
                    with ThreadPoolExecutor(max_workers=100) as executor:
                        futures = []
                        
                        for operation_idx in range(operations_per_user):
                            # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
                            if operation_idx % 3 == 0:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                                futures.append(executor.submit(get_user_instagram_accounts, user_id=user['user_id']))
                            elif operation_idx % 3 == 1:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                if user['accounts']:
                                    account_id = random.choice(user['accounts'])
                                    futures.append(executor.submit(get_user_instagram_account, account_id=account_id, user_id=user['user_id']))
                            else:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                                futures.append(executor.submit(get_user_info, user_id=user['user_id']))
                                
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        for future in as_completed(futures):
                            try:
                                result = future.result(timeout=10)
                                batch_operations += 1
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
                                if hasattr(result, '__iter__') and not isinstance(result, str):
                                    for item in result:
                                        if hasattr(item, 'user_id') and item.user_id != user['user_id']:
                                            batch_violations.append({
                                                'type': 'ultra_concurrent_breach',
                                                'user_id': user['user_id'],
                                                'accessed_user_id': item.user_id,
                                                'item_id': getattr(item, 'id', None)
                                            })
                                            
                            except Exception as e:
                                # –¢–∞–π–º–∞—É—Ç—ã –∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–∞–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –æ–∂–∏–¥–∞–µ–º—ã
                                pass
                                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—å—Ç—Ä–∞-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")
                    
            return batch_violations, batch_operations
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        user_batch_size = 5  # –ü–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞—Ç—á–µ
        user_batches = [self.users[i:i+user_batch_size] for i in range(0, len(self.users), user_batch_size)]
        
        logger.info(f"üíÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(user_batches)} –±–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        with ThreadPoolExecutor(max_workers=20) as executor:
            futures = [executor.submit(ultra_aggressive_user_activity, batch) for batch in user_batches]
            
            for future_idx, future in enumerate(as_completed(futures)):
                try:
                    batch_violations, batch_operations = future.result()
                    violations.extend(batch_violations)
                    total_operations += batch_operations
                    
                    logger.info(f"üíÄ –ë–∞—Ç—á {future_idx+1}/{len(futures)} –∑–∞–≤–µ—Ä—à–µ–Ω: {batch_operations} –æ–ø–µ—Ä–∞—Ü–∏–π")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
                    
        self.attack_results['ultimate_concurrent'] = {
            'users': len(self.users),
            'total_operations': total_operations,
            'violations': len(violations),
            'operations_per_user': 500
        }
        
        logger.info(f"üìä –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–¢–ê–ö–ê 1: {len(violations)} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏–∑ {total_operations:,} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
    def ultimate_attack_2_sql_injection_validation(self):
        """–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π"""
        logger.info("üíÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–¢–ê–ö–ê 2: –í–∞–ª–∏–¥–∞—Ü–∏—è SQL-–∏–Ω—ä–µ–∫—Ü–∏–π")
        
        violations = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        malicious_inputs = [
            # SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
            "'; DROP TABLE instagram_accounts; --",
            "1 OR 1=1",
            "1; SELECT * FROM instagram_accounts; --",
            "-1 UNION SELECT * FROM instagram_accounts",
            "1' OR '1'='1",
            "admin'--",
            "admin' OR 1=1#",
            "'; INSERT INTO instagram_accounts VALUES ('hacked'); --",
            
            # –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
            str(2**63),     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π int64
            str(2**64),     # –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
            -2**63,         # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π int64
            float('inf'),   # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
            float('-inf'),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            "NULL",
            "null",
            "undefined",
            "",
            " ",
            "\x00",         # Null byte
            "\n\r\t",       # Whitespace
            
            # –ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞
            "0x41414141",   # Hex
            "0",
            "-1",
            "999999999999999999999",  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
            
            # –°–∫—Ä–∏–ø—Ç—ã
            "<script>alert('xss')</script>",
            "javascript:alert(1)",
            
            # –ü—É—Ç–∏
            "../../../etc/passwd",
            "..\\..\\windows\\system32",
        ]
        
        logger.info(f"üíÄ –¢–µ—Å—Ç–∏—Ä—É—é {len(malicious_inputs)} –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        
        for user in self.users[:50]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            for malicious_input in malicious_inputs:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    test_functions = [
                        lambda: get_user_instagram_accounts(user_id=malicious_input),
                        lambda: get_user_info(user_id=malicious_input),
                    ]
                    
                    for test_func in test_functions:
                        try:
                            result = test_func()
                            
                            # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ - —ç—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
                            if result:
                                violations.append({
                                    'type': 'sql_injection_success',
                                    'malicious_input': str(malicious_input)[:100],  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –ª–æ–≥–æ–≤
                                    'function': test_func.__name__ if hasattr(test_func, '__name__') else 'lambda',
                                    'result_count': len(result) if hasattr(result, '__len__') else 1
                                })
                                
                        except (TypeError, ValueError, OverflowError):
                            # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–ª–æ—Ö–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            pass
                        except Exception as e:
                            # –î—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                            violations.append({
                                'type': 'unexpected_exception',
                                'malicious_input': str(malicious_input)[:100],
                                'exception': str(e)[:200]
                            })
                            
                except Exception as e:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—ä–µ–∫—Ü–∏–∏ {malicious_input}: {e}")
                    
        self.attack_results['ultimate_sql_injection'] = {
            'tested_inputs': len(malicious_inputs),
            'tested_users': 50,
            'violations': len(violations),
            'violation_details': violations[:20]  # –ü–µ—Ä–≤—ã–µ 20 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        }
        
        logger.info(f"üìä –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–¢–ê–ö–ê 2: {len(violations)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        
    def ultimate_attack_3_resource_exhaustion(self):
        """–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ 3: –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üíÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–¢–ê–ö–ê 3: –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        violations = []
        initial_memory = psutil.Process().memory_info().rss / 1024 / 1024
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        resource_tasks = []
        
        def resource_exhaustion_worker():
            worker_violations = []
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
            sessions = []
            try:
                for _ in range(50):  # 50 —Å–µ—Å—Å–∏–π –Ω–∞ –≤–æ—Ä–∫–µ—Ä
                    session = get_session()
                    sessions.append(session)
                    
                # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ø–∞–º—è—Ç–∏
                memory_hog = [random.random() for _ in range(500000)]  # 500k —á–∏—Å–µ–ª
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                test_users = random.sample(self.users, min(10, len(self.users)))
                
                for user in test_users:
                    try:
                        accounts = get_user_instagram_accounts(user_id=user['user_id'])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
                        for account in accounts[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                            if account.user_id != user['user_id']:
                                worker_violations.append({
                                    'type': 'resource_exhaustion_breach',
                                    'user_id': user['user_id'],
                                    'account_id': account.id,
                                    'account_user_id': account.user_id,
                                    'memory_usage_mb': psutil.Process().memory_info().rss / 1024 / 1024
                                })
                                
                    except Exception as e:
                        # –û—à–∏–±–∫–∏ –æ–∂–∏–¥–∞–µ–º—ã –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                        pass
                        
            finally:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                for session in sessions:
                    try:
                        session.close()
                    except:
                        pass
                del memory_hog
                        
            return worker_violations
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        with ThreadPoolExecutor(max_workers=50) as executor:
            futures = [executor.submit(resource_exhaustion_worker) for _ in range(50)]
            
            for future in as_completed(futures):
                try:
                    worker_violations = future.result()
                    violations.extend(worker_violations)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
                    
        final_memory = psutil.Process().memory_info().rss / 1024 / 1024
        
        self.attack_results['ultimate_resource_exhaustion'] = {
            'workers': 50,
            'sessions_per_worker': 50,
            'initial_memory_mb': initial_memory,
            'final_memory_mb': final_memory,
            'memory_increase_mb': final_memory - initial_memory,
            'violations': len(violations)
        }
        
        logger.info(f"üìä –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–¢–ê–ö–ê 3: {len(violations)} –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
        logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {initial_memory:.1f} -> {final_memory:.1f} MB (+{final_memory - initial_memory:.1f} MB)")
        
    def cleanup_ultimate_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üíÄ –û—á–∏—â–∞—é –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ï —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        logger.info(f"üíÄ –ö —É–¥–∞–ª–µ–Ω–∏—é: {len(self.users):,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ~{self.total_accounts:,} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, ~{self.total_tasks:,} –∑–∞–¥–∞—á")
        
        deleted_accounts = 0
        deleted_tasks = 0
        deleted_warmups = 0
        
        # –£–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏
        batch_size = 1000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            all_user_ids = [u['user_id'] for u in self.users]
            all_account_ids = []
            for user in self.users:
                all_account_ids.extend(user['accounts'])
                
            logger.info(f"üíÄ –£–¥–∞–ª—è—é {len(all_user_ids):,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ {len(all_account_ids):,} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            # –£–¥–∞–ª—è–µ–º –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(all_user_ids), batch_size):
                batch_user_ids = all_user_ids[i:i+batch_size]
                batch_account_ids = []
                
                # –°–æ–±–∏—Ä–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ç—á–∞
                for user in self.users[i:i+batch_size]:
                    if i//batch_size == 0 or i < len(self.users):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
                        batch_account_ids.extend(user['accounts'])
                
                with get_session() as session:
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏
                    if batch_user_ids:
                        deleted_tasks += session.query(PublishTask).filter(PublishTask.user_id.in_(batch_user_ids)).delete(synchronize_session=False)
                        
                    # –£–¥–∞–ª—è–µ–º warmup –∑–∞–¥–∞—á–∏
                    if batch_account_ids:
                        deleted_warmups += session.query(WarmupTask).filter(WarmupTask.account_id.in_(batch_account_ids)).delete(synchronize_session=False)
                        deleted_accounts += session.query(InstagramAccount).filter(InstagramAccount.id.in_(batch_account_ids)).delete(synchronize_session=False)
                        
                    session.commit()
                    
                if i % (batch_size * 10) == 0:
                    logger.info(f"üíÄ –£–¥–∞–ª–µ–Ω–æ –±–∞—Ç—á–µ–π: {i//batch_size + 1}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
        logger.info(f"‚úÖ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:")
        logger.info(f"   üíÄ –£–¥–∞–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {deleted_accounts:,}")
        logger.info(f"   üíÄ –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {deleted_tasks:,}")
        logger.info(f"   üíÄ –£–¥–∞–ª–µ–Ω–æ warmup: {deleted_warmups:,}")
        
    def analyze_ultimate_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("=" * 120)
        logger.info("üíÄ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–û–ì–û –°–¢–†–ï–°–°-–¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò")
        logger.info("=" * 120)
        
        total_time = (datetime.now() - self.start_time).total_seconds()
        total_violations = sum(result.get('violations', 0) for result in self.attack_results.values())
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥ ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users):,}")
        logger.info(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {self.total_accounts:,}")
        logger.info(f"üìã –ó–∞–¥–∞—á: {self.total_tasks:,}")
        logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {psutil.Process().memory_info().rss / 1024 / 1024:.1f} MB")
        logger.info(f"üßµ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {threading.active_count()}")
        
        logger.info("\nüíÄ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–• –ê–¢–ê–ö:")
        
        attack_names = {
            'ultimate_concurrent': 'üíÄ –ú–∞—Å—Å–∏–≤–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
            'ultimate_sql_injection': 'üíÄ –í–∞–ª–∏–¥–∞—Ü–∏—è SQL-–∏–Ω—ä–µ–∫—Ü–∏–π',
            'ultimate_resource_exhaustion': 'üíÄ –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤'
        }
        
        successful_attacks = 0
        
        for attack_key, attack_name in attack_names.items():
            if attack_key in self.attack_results:
                result = self.attack_results[attack_key]
                violations = result.get('violations', 0)
                
                if violations > 0:
                    logger.error(f"{attack_name}: ‚ùå {violations:,} –ù–ê–†–£–®–ï–ù–ò–ô")
                    successful_attacks += 1
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if attack_key == 'ultimate_concurrent':
                        total_ops = result.get('total_operations', 0)
                        logger.error(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–π: {total_ops:,}")
                    elif attack_key == 'ultimate_sql_injection':
                        tested_inputs = result.get('tested_inputs', 0)
                        logger.error(f"   üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Ö–æ–¥–æ–≤: {tested_inputs}")
                        
                else:
                    logger.info(f"{attack_name}: ‚úÖ –û–¢–†–ê–ñ–ï–ù–ê")
                    
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        logger.info("=" * 120)
        
        if total_violations == 0:
            logger.info("üèÜ –í–°–ï –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ï –ê–¢–ê–ö–ò –û–¢–†–ê–ñ–ï–ù–´!")
            logger.info("üíÄ –°–ò–°–¢–ï–ú–ê –í–´–î–ï–†–ñ–ê–õ–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–£–Æ –ù–ê–ì–†–£–ó–ö–£!")
            logger.info("üöÄ –°–ò–°–¢–ï–ú–ê –ê–ë–°–û–õ–Æ–¢–ù–û –ì–û–¢–û–í–ê –ö –õ–Æ–ë–û–ô –ü–†–û–î–ê–ö–®–ù –ù–ê–ì–†–£–ó–ö–ï!")
        elif successful_attacks <= 1:
            logger.warning("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –í–´–î–ï–†–ñ–ê–õ–ê –ë–û–õ–¨–®–ò–ù–°–¢–í–û –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–• –ê–¢–ê–ö")
            logger.warning("üîß –ï–°–¢–¨ –ù–ï–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò –ü–†–ò –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ô –ù–ê–ì–†–£–ó–ö–ï")
        else:
            logger.error("üí• –°–ò–°–¢–ï–ú–ê –ù–ï –í–´–î–ï–†–ñ–ê–õ–ê –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–£–Æ –ù–ê–ì–†–£–ó–ö–£!")
            logger.error("üõë –¢–†–ï–ë–£–ï–¢–°–Ø –°–ï–†–¨–ï–ó–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø!")
            
        logger.info(f"üìä –ò—Ç–æ–≥–æ: {successful_attacks}/{len(attack_names)} —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ç–∞–∫ —É—Å–ø–µ—à–Ω—ã")
        logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {total_violations:,}")
        logger.info("=" * 120)
        
        return total_violations == 0
        
    def run_ultimate_stress_test(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
        logger.info("üíÄ" * 60)
        logger.info("üíÄ –ó–ê–ü–£–°–ö –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–û–ì–û –°–¢–†–ï–°–°-–¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò")
        logger.info("üíÄ 100 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô x 500 –ê–ö–ö–ê–£–ù–¢–û–í = 50,000 –ê–ö–ö–ê–£–ù–¢–û–í")
        logger.info("üíÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ù–ê–ì–†–£–ó–ö–ê –ù–ê –°–ò–°–¢–ï–ú–£")
        logger.info("üíÄ" * 60)
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑—ã
            logger.info("üíÄ –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            self.create_massive_user_base(100, 500)
            
            # 2. –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ 1: –ú–∞—Å—Å–∏–≤–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            logger.info("üíÄ –≠–¢–ê–ü 2: –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ - –º–∞—Å—Å–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
            self.ultimate_attack_1_massive_concurrent_requests()
            
            # 3. –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
            logger.info("üíÄ –≠–¢–ê–ü 3: –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ - SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏...")
            self.ultimate_attack_2_sql_injection_validation()
            
            # 4. –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ 3: –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            logger.info("üíÄ –≠–¢–ê–ü 4: –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ - –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            self.ultimate_attack_3_resource_exhaustion()
            
            # 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            logger.info("üíÄ –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            success = self.analyze_ultimate_results()
            
            return success
            
        except KeyboardInterrupt:
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üíÄ –§–ò–ù–ê–õ–¨–ù–´–ô –≠–¢–ê–ü: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.cleanup_ultimate_data()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("üíÄ –ó–∞–ø—É—Å–∫ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –∏–∑–æ–ª—è—Ü–∏–∏...")
    logger.info(f"üíÄ –î–æ—Å—Ç—É–ø–Ω–æ —è–¥–µ—Ä CPU: {multiprocessing.cpu_count()}")
    logger.info(f"üíÄ –î–æ—Å—Ç—É–ø–Ω–æ RAM: {psutil.virtual_memory().total / 1024 / 1024 / 1024:.1f} GB")
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    from database.db_manager import init_db
    logger.info("üíÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø—É–ª–æ–º...")
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø—É–ª–æ–º –≥–æ—Ç–æ–≤–∞!")
    
    test = UltimateStressTest()
    success = test.run_ultimate_stress_test()
    
    if success:
        logger.info("üèÜ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        exit(0)
    else:
        logger.error("üí• –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        exit(1)

if __name__ == "__main__":
    main() 